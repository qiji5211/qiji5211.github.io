{
    "version": "https://jsonfeed.org/version/1",
    "title": "白骨生花 • All posts by \"模块化\" category",
    "description": "同行者，拿起火把！",
    "home_page_url": "http://qiji5211.com",
    "items": [
        {
            "id": "http://qiji5211.com/2023/11/23/qianduan/JS/mo/%E6%A8%A1%E5%9D%97%E5%8C%96_%E7%AC%94%E8%AE%B0/",
            "url": "http://qiji5211.com/2023/11/23/qianduan/JS/mo/%E6%A8%A1%E5%9D%97%E5%8C%96_%E7%AC%94%E8%AE%B0/",
            "title": "JS模块化（简版）",
            "date_published": "2023-11-23T09:30:58.000Z",
            "content_html": "<h2 id=\"js模块化\"><a class=\"anchor\" href=\"#js模块化\">#</a> JS 模块化</h2>\n<ul>\n<li>模块化的理解</li>\n<li>什么是模块？\n<ul>\n<li>将一个复杂的程序依据一定的规则 (规范) 封装成几个块 (文件), 并进行组合在一起</li>\n<li>块的内部数据 / 实现是私有的，只是向外部暴露一些接口 (方法) 与外部其它模块通信</li>\n</ul>\n</li>\n<li>一个模块的组成\n<ul>\n<li>数据 ---&gt; 内部的属性</li>\n<li>操作数据的行为 ---&gt; 内部的函数</li>\n</ul>\n</li>\n<li>模块化\n<ul>\n<li>编码时是按照模块一个一个编码的，整个项目就是一个模块化的项目</li>\n</ul>\n</li>\n<li>模块化的进化过程\n<ul>\n<li>全局 function 模式 :\n<ul>\n<li>编码：全局变量 / 函数</li>\n<li>问题：污染全局命名空间，容易引起命名冲突 / 数据不安全</li>\n</ul>\n</li>\n<li>namespace 模式 :\n<ul>\n<li>编码：将数据 / 行为封装到对象中</li>\n<li>解决：命名冲突 (减少了全局变量)</li>\n<li>问题：数据不安全 (外部可以直接修改模块内部的数据)</li>\n</ul>\n</li>\n<li>IIFE 模式 / 增强\n<ul>\n<li>IIFE : 立即调用函数表达式 ---&gt; 匿名函数自调用</li>\n<li>编码：将数据和行为封装到一个函数内部，通过给 window 添加属性来向外暴露接口</li>\n<li>引入依赖：通过函数形参来引入依赖模块<pre><code>(function(window, module2)&#123;\n  var data = 'atguigu.com'\n  function foo() &#123;\n     module2.xxx()\n     console.log('foo()'+data)\n  &#125;\n  function bar() &#123;\n     console.log('bar()'+data)\n  &#125;\n  \n  window.module = &#123;foo&#125;\n&#125;)(window, module2)\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>模块化规范\n<ul>\n<li>CommonJS\n<ul>\n<li>Node.js : 服务器端</li>\n<li>Browserify : 浏览器端    也称为 js 的打包工具</li>\n<li>基本语法:\n<ul>\n<li>定义暴露模块 : exports<pre><code>exports.xxx = value\nmodule.exports = value\n</code></pre>\n</li>\n</ul>\n引入模块 : require<pre><code>var module = require('模块名/模块相对路径')\n</code></pre>\n</li>\n<li>引入模块发生在什么时候？\n<ul>\n<li>Node : 运行时，动态同步引入</li>\n<li>Browserify : 在运行前对模块进行编译 / 转译 / 打包的处理 (已经将依赖的模块包含进来了),<br />\n 运行的是打包生成的 js, 运行时不存在需要再从远程引入依赖模块</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>AMD : 浏览器端\n<ul>\n<li>require.js</li>\n<li>基本语法\n<ul>\n<li>定义暴露模块: define ([依赖模块名], function (){return 模块对象})</li>\n<li>引入模块: require ([' 模块 1', ' 模块 2', ' 模块 3'], function (m1, m2){// 使用模块对象})</li>\n<li>配置:<pre><code>require.config(&#123;\n  //基本路径\n  baseUrl : 'js/',\n  //标识名称与路径的映射\n  paths : &#123;\n    '模块1' : 'modules/模块1',\n    '模块2' : 'modules/模块2',\n    'angular' : 'libs/angular',\n    'angular-messages' : 'libs/angular-messages'\n  &#125;,\n  //非AMD的模块\n  shim : &#123;\n    'angular' : &#123;\n        exports : 'angular'\n    &#125;,\n    'angular-messages' : &#123;\n        exports : 'angular-messages',\n        deps : ['angular']\n    &#125;\n  &#125;\n&#125;)\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>CMD : 浏览器端\n<ul>\n<li>sea.js</li>\n<li>基本语法\n<ul>\n<li>定义暴露模块:<pre><code>define(function(require, module, exports)&#123;\n  通过require引入依赖模块\n  通过module/exports来暴露模块\n  exports.xxx = value\n&#125;)\n</code></pre>\n</li>\n<li>使用模块 seajs.use ([' 模块 1', ' 模块 2'])</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ES6\n<ul>\n<li>ES6 内置了模块化的实现</li>\n<li>基本语法\n<ul>\n<li>\n<p>定义暴露模块 : export</p>\n<ul>\n<li>暴露一个对象:<pre><code>export default 对象\n</code></pre>\n</li>\n<li>暴露多个:<pre><code>export var xxx = value1\nexport let yyy = value2\n\nvar xxx = value1\nlet yyy = value2\nexport &#123;xxx, yyy&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>引入使用模块 : import</p>\n<ul>\n<li>default 模块:<pre><code>import xxx  from '模块路径/模块名'\n</code></pre>\n</li>\n<li>其它模块<pre><code>import &#123;xxx, yyy&#125; from '模块路径/模块名'\nimport * as module1 from '模块路径/模块名'\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>问题：所有浏览器还不能直接识别 ES6 模块化的语法</li>\n<li>解决:\n<ul>\n<li>使用 Babel 将 ES6---&gt;ES5 (使用了 CommonJS) ---- 浏览器还不能直接支行</li>\n<li>使用 Browserify---&gt; 打包处理 ---- 浏览器可以运行</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "http://qiji5211.com/2023/11/23/qianduan/JS/mo/1_%E6%A8%A1%E5%9D%97%E5%8C%96%E8%BF%9B%E5%8C%96%E5%8F%B2%E6%95%99%E7%A8%8B/",
            "url": "http://qiji5211.com/2023/11/23/qianduan/JS/mo/1_%E6%A8%A1%E5%9D%97%E5%8C%96%E8%BF%9B%E5%8C%96%E5%8F%B2%E6%95%99%E7%A8%8B/",
            "title": "JS模块化",
            "date_published": "2023-11-23T09:30:58.000Z",
            "content_html": "<h1 id=\"模块化进化史教程\"><a class=\"anchor\" href=\"#模块化进化史教程\">#</a> 模块化进化史教程</h1>\n<h2 id=\"模块化进化史教程-2\"><a class=\"anchor\" href=\"#模块化进化史教程-2\">#</a> 模块化进化史教程</h2>\n<ol>\n<li>全局 function 模式</li>\n</ol>\n<ul>\n<li>module1.js<pre><code>//数据\nlet data = 'atguigu.com'\n\n//操作数据的函数\nfunction foo() &#123;\n  console.log(`foo() $&#123;data&#125;`)\n&#125;\nfunction bar() &#123;\n  console.log(`bar() $&#123;data&#125;`)\n&#125;\n</code></pre>\n</li>\n<li>module2.js<pre><code>let data2 = 'other data'\n\nfunction foo() &#123;  //与另一个模块中的函数冲突了\n  console.log(`foo() $&#123;data2&#125;`)\n&#125;\n</code></pre>\n</li>\n<li>test1.html<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;module1.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n\n  let data = &quot;修改后的数据&quot;\n  foo()\n  bar()\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>说明:\n<ul>\n<li>全局函数模式：将不同的功能封装成不同的全局函数</li>\n<li>问题: Global 被污染了，很容易引起命名冲突</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>namespace 模式</li>\n</ol>\n<ul>\n<li>module1.js<pre><code>let myModule = &#123;\n  data: 'atguigu.com',\n  foo() &#123;\n    console.log(`foo() $&#123;this.data&#125;`)\n  &#125;,\n  bar() &#123;\n    console.log(`bar() $&#123;this.data&#125;`)\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li>module2.js<pre><code>let myModule2 = &#123;\n  data: 'atguigu.com2222',\n  foo() &#123;\n    console.log(`foo() $&#123;this.data&#125;`)\n  &#125;,\n  bar() &#123;\n    console.log(`bar() $&#123;this.data&#125;`)\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li>test2.html<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;module22.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n  myModule.foo()\n  myModule.bar()\n\n  myModule2.foo()\n  myModule2.bar()\n\n  myModule.data = 'other data' //能直接修改模块内部的数据\n  myModule.foo()\n\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>说明\n<ul>\n<li>namespace 模式：简单对象封装</li>\n<li>作用：减少了全局变量</li>\n<li>问题：不安全</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>IIFE 模式</li>\n</ol>\n<ul>\n<li>module3.js<pre><code>(function (window) &#123;\n  //数据\n  let data = 'atguigu.com'\n\n  //操作数据的函数\n  function foo() &#123; //用于暴露有函数\n    console.log(`foo() $&#123;data&#125;`)\n  &#125;\n\n  function bar() &#123;//用于暴露有函数\n    console.log(`bar() $&#123;data&#125;`)\n    otherFun() //内部调用\n  &#125;\n\n  function otherFun() &#123; //内部私有的函数\n    console.log('otherFun()')\n  &#125;\n\n  //暴露行为\n  window.myModule = &#123;foo, bar&#125;\n&#125;)(window)\n</code></pre>\n</li>\n<li>test3.html<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;module3.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n  myModule.foo()\n  myModule.bar()\n  //myModule.otherFun()  //myModule.otherFun is not a function\n  console.log(myModule.data) //undefined 不能访问模块内部数据\n  myModule.data = 'xxxx' //不是修改的模块内部的data\n  myModule.foo() //没有改变\n\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>说明:\n<ul>\n<li>IIFE 模式：匿名函数自调用 (闭包)</li>\n<li>IIFE : immediately-invoked function expression (立即调用函数表达式)</li>\n<li>作用：数据是私有的，外部只能通过暴露的方法操作</li>\n<li>问题：如果当前这个模块依赖另一个模块怎么办？</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>IIFE 模式增强</li>\n</ol>\n<ul>\n<li>引入 jquery 到项目中</li>\n<li>module4.js<pre><code>(function (window, $) &#123;\n  //数据\n  let data = 'atguigu.com'\n\n  //操作数据的函数\n  function foo() &#123; //用于暴露有函数\n    console.log(`foo() $&#123;data&#125;`)\n    $('body').css('background', 'red')\n  &#125;\n\n  function bar() &#123;//用于暴露有函数\n    console.log(`bar() $&#123;data&#125;`)\n    otherFun() //内部调用\n  &#125;\n\n  function otherFun() &#123; //内部私有的函数\n    console.log('otherFun()')\n  &#125;\n\n  //暴露行为\n  window.myModule = &#123;foo, bar&#125;\n&#125;)(window, jQuery)\n</code></pre>\n</li>\n<li>test4.html<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.10.1.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;module4.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n  myModule.foo()\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>说明\n<ul>\n<li>IIFE 模式增强：引入依赖</li>\n<li>这就是现代模块实现的基石</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>页面加载多个 js 的问题</li>\n</ol>\n<ul>\n<li>页面:<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;module1.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;module3.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;module4.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n</li>\n<li>说明\n<ul>\n<li>一个页面需要引入多个 js 文件</li>\n<li>问题:\n<ul>\n<li>请求过多</li>\n<li>依赖模糊</li>\n<li>难以维护</li>\n</ul>\n</li>\n<li>这些问题可以通过现代模块化编码和项目构建来解决</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"commonjs_node模块化教程\"><a class=\"anchor\" href=\"#commonjs_node模块化教程\">#</a> CommonJS_Node 模块化教程</h1>\n<h2 id=\"nodejs模块化教程\"><a class=\"anchor\" href=\"#nodejs模块化教程\">#</a> Node.js 模块化教程</h2>\n<ol>\n<li>下载安装 node.js</li>\n<li>创建项目结构</li>\n</ol>\n<pre><code>|-modules\n  |-module1.js\n  |-module2.js\n  |-module3.js\n|-app.js\n|-package.json\n  &#123;\n    &quot;name&quot;: &quot;commonJS-node&quot;,\n    &quot;version&quot;: &quot;1.0.0&quot;\n  &#125;\n</code></pre>\n<ol start=\"3\">\n<li>下载第三方模块</li>\n</ol>\n<ul>\n<li>npm install uniq --save</li>\n</ul>\n<ol start=\"4\">\n<li>模块化编码</li>\n</ol>\n<ul>\n<li>module1.js<pre><code>module.exports = &#123;\n  foo() &#123;\n    console.log('moudle1 foo()')\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li>module2.js<pre><code>module.exports = function () &#123;\n  console.log('module2()')\n&#125;\n</code></pre>\n</li>\n<li>module3.js<pre><code>exports.foo = function () &#123;\n  console.log('module3 foo()')\n&#125;\n\nexports.bar = function () &#123;\n  console.log('module3 bar()')\n&#125;\n</code></pre>\n</li>\n<li>app.js<pre><code>/**\n  1. 定义暴露模块:\n    module.exports = value;\n    exports.xxx = value;\n  2. 引入模块:\n    var module = require(模块名或模块路径);\n */\n&quot;use strict&quot;;\n//引用模块\nlet module1 = require('./modules/module1')\nlet module2 = require('./modules/module2')\nlet module3 = require('./modules/module3')\n\nlet uniq = require('uniq')\nlet fs = require('fs')\n\n//使用模块\nmodule1.foo()\nmodule2()\nmodule3.foo()\nmodule3.bar()\n\nconsole.log(uniq([1, 3, 1, 4, 3]))\n\nfs.readFile('app.js', function (error, data) &#123;\n  console.log(data.toString())\n&#125;)\n</code></pre>\n</li>\n</ul>\n<ol start=\"5\">\n<li>通过 node 运行 app.js</li>\n</ol>\n<ul>\n<li>命令: node app.js</li>\n<li>工具：右键 --&gt; 运行</li>\n</ul>\n<h1 id=\"commonjs-browserify模块化教程\"><a class=\"anchor\" href=\"#commonjs-browserify模块化教程\">#</a> CommonJS-Browserify 模块化教程</h1>\n<h2 id=\"browserify模块化使用教程\"><a class=\"anchor\" href=\"#browserify模块化使用教程\">#</a> Browserify 模块化使用教程</h2>\n<ol>\n<li>创建项目结构</li>\n</ol>\n<pre><code>|-js\n  |-dist //打包生成文件的目录\n  |-src //源码所在的目录\n    |-module1.js\n    |-module2.js\n    |-module3.js\n    |-app.js //应用主源文件\n|-index.html\n|-package.json\n  &#123;\n    &quot;name&quot;: &quot;browserify-test&quot;,\n    &quot;version&quot;: &quot;1.0.0&quot;\n  &#125;\n</code></pre>\n<ol start=\"2\">\n<li>下载 browserify</li>\n</ol>\n<ul>\n<li>全局: npm install browserify -g</li>\n<li>局部: npm install browserify --save-dev</li>\n</ul>\n<ol start=\"3\">\n<li>定义模块代码</li>\n</ol>\n<ul>\n<li>module1.js<pre><code>module.exports = &#123;\n  foo() &#123;\n    console.log('moudle1 foo()')\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li>module2.js<pre><code>module.exports = function () &#123;\n  console.log('module2()')\n&#125;\n</code></pre>\n</li>\n<li>module3.js<pre><code>exports.foo = function () &#123;\n  console.log('module3 foo()')\n&#125;\n\nexports.bar = function () &#123;\n  console.log('module3 bar()')\n&#125;\n</code></pre>\n</li>\n<li>app.js (应用的主 js)<pre><code>//引用模块\nlet module1 = require('./module1')\nlet module2 = require('./module2')\nlet module3 = require('./module3')\n\nlet uniq = require('uniq')\n\n//使用模块\nmodule1.foo()\nmodule2()\nmodule3.foo()\nmodule3.bar()\n\nconsole.log(uniq([1, 3, 1, 4, 3]))\n</code></pre>\n</li>\n<li>打包处理 js:\n<ul>\n<li>browserify js/src/app.js -o js/dist/bundle.js</li>\n</ul>\n</li>\n<li>页面使用引入:<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;js/dist/bundle.js&quot;&gt;&lt;/script&gt; \n</code></pre>\n</li>\n</ul>\n<h1 id=\"amd-requirejs模块化教程\"><a class=\"anchor\" href=\"#amd-requirejs模块化教程\">#</a> AMD-RequireJS 模块化教程</h1>\n<h2 id=\"requirejs使用教程\"><a class=\"anchor\" href=\"#requirejs使用教程\">#</a> require.js 使用教程</h2>\n<ol>\n<li>下载 require.js, 并引入</li>\n</ol>\n<ul>\n<li>官网: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZXF1aXJlanMuY24v\">http://www.requirejs.cn/</span></li>\n<li>github : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlcXVpcmVqcy9yZXF1aXJlanM=\">https://github.com/requirejs/requirejs</span></li>\n<li>将 require.js 导入项目: js/libs/require.js</li>\n</ul>\n<ol start=\"2\">\n<li>创建项目结构</li>\n</ol>\n<pre><code>|-js\n  |-libs\n    |-require.js\n  |-modules\n    |-alerter.js\n    |-dataService.js\n  |-main.js\n|-index.html\n</code></pre>\n<ol start=\"3\">\n<li>定义 require.js 的模块代码</li>\n</ol>\n<ul>\n<li>dataService.js<pre><code>define(function () &#123;\n  let msg = 'atguigu.com'\n\n  function getMsg() &#123;\n    return msg.toUpperCase()\n  &#125;\n\n  return &#123;getMsg&#125;\n&#125;)\n</code></pre>\n</li>\n<li>alerter.js<pre><code>define(['dataService', 'jquery'], function (dataService, $) &#123;\n  let name = 'Tom2'\n\n  function showMsg() &#123;\n    $('body').css('background', 'gray')\n    alert(dataService.getMsg() + ', ' + name)\n  &#125;\n\n  return &#123;showMsg&#125;\n&#125;)\n</code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li>应用主 (入口) js: main.js</li>\n</ol>\n<pre><code>(function () &#123;\n  //配置\n  require.config(&#123;\n    //基本路径\n    baseUrl: &quot;js/&quot;,\n    //模块标识名与模块路径映射\n    paths: &#123;\n      &quot;alerter&quot;: &quot;modules/alerter&quot;,\n      &quot;dataService&quot;: &quot;modules/dataService&quot;,\n    &#125;\n  &#125;)\n  //引入使用模块\n  require( ['alerter'], function(alerter) &#123;\n    alerter.showMsg()\n  &#125;)\n&#125;)()\n</code></pre>\n<ol start=\"5\">\n<li>页面使用模块:<br />\n&lt;script data-main=&quot;js/main&quot; src=&quot;js/libs/require.js&quot;&gt;&lt;/script&gt;</li>\n</ol>\n<hr />\n<ol start=\"6\">\n<li>使用第三方基于 require.js 的框架 (jquery)</li>\n</ol>\n<ul>\n<li>将 jquery 的库文件导入到项目:\n<ul>\n<li>js/libs/jquery-1.10.1.js</li>\n</ul>\n</li>\n<li>在 main.js 中配置 jquery 路径<pre><code>paths: &#123;\n          'jquery': 'libs/jquery-1.10.1'\n      &#125;\n</code></pre>\n</li>\n<li>在 alerter.js 中使用 jquery<pre><code>define(['dataService', 'jquery'], function (dataService, $) &#123;\n    var name = 'xfzhang'\n    function showMsg() &#123;\n        $('body').css(&#123;background : 'red'&#125;)\n        alert(name + ' '+dataService.getMsg())\n    &#125;\n    return &#123;showMsg&#125;\n&#125;)\n</code></pre>\n</li>\n</ul>\n<hr />\n<ol start=\"7\">\n<li>使用第三方不基于 require.js 的框架 (angular/angular-messages)</li>\n</ol>\n<ul>\n<li>将 angular.js 和 angular-messages.js 导入项目\n<ul>\n<li>js/libs/angular.js</li>\n<li>js/libs/angular-messages.js</li>\n</ul>\n</li>\n<li>在 main.js 中配置<pre><code>(function () &#123;\n  require.config(&#123;\n    //基本路径\n    baseUrl: &quot;js/&quot;,\n    //模块标识名与模块路径映射\n    paths: &#123;\n      //第三方库\n      'jquery' : 'libs/jquery-1.10.1',\n      'angular' : 'libs/angular',\n      'angular-messages' : 'libs/angular-messages',\n      //自定义模块\n      &quot;alerter&quot;: &quot;modules/alerter&quot;,\n      &quot;dataService&quot;: &quot;modules/dataService&quot;\n    &#125;,\n    /*\n     配置不兼容AMD的模块\n     exports : 指定导出的模块名\n     deps  : 指定所有依赖的模块的数组\n     */\n    shim: &#123;\n      'angular' : &#123;\n        exports : 'angular'\n      &#125;,\n      'angular-messages' : &#123;\n        exports : 'angular-messages',\n        deps : ['angular']\n      &#125;\n    &#125;\n  &#125;)\n  //引入使用模块\n  require( ['alerter', 'angular', 'angular-messages'], function(alerter, angular) &#123;\n    alerter.showMsg()\n    angular.module('myApp', ['ngMessages'])\n    angular.bootstrap(document,[&quot;myApp&quot;])\n  &#125;)\n&#125;)()\n</code></pre>\n</li>\n<li>页面:<pre><code>&lt;form name=&quot;myForm&quot;&gt;\n  用户名: &lt;input type=&quot;text&quot; name=&quot;username&quot; ng-model=&quot;username&quot; ng-required=&quot;true&quot;&gt;\n  &lt;div style=&quot;color: red;&quot; ng-show=&quot;myForm.username.$dirty&amp;&amp;myForm.username.$invalid&quot;&gt;用户名是必须的&lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n</li>\n</ul>\n<h1 id=\"cmd-seajs模块化教程\"><a class=\"anchor\" href=\"#cmd-seajs模块化教程\">#</a> CMD-SeaJS. 模块化教程</h1>\n<h2 id=\"seajs简单使用教程\"><a class=\"anchor\" href=\"#seajs简单使用教程\">#</a> sea.js 简单使用教程</h2>\n<ol>\n<li>下载 sea.js, 并引入</li>\n</ol>\n<ul>\n<li>官网: <span class=\"exturl\" data-url=\"aHR0cDovL3NlYWpzLm9yZy8=\">http://seajs.org/</span></li>\n<li>github : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYWpzL3NlYWpz\">https://github.com/seajs/seajs</span></li>\n<li>将 sea.js 导入项目: js/libs/sea.js</li>\n</ul>\n<ol start=\"2\">\n<li>创建项目结构</li>\n</ol>\n<pre><code>|-js\n  |-libs\n    |-sea.js\n  |-modules\n    |-module1.js\n    |-module2.js\n    |-module3.js\n    |-module4.js\n    |-main.js\n|-index.html\n</code></pre>\n<ol start=\"3\">\n<li>定义 sea.js 的模块代码</li>\n</ol>\n<ul>\n<li>module1.js<pre><code>define(function (require, exports, module) &#123;\n  //内部变量数据\n  var data = 'atguigu.com'\n  //内部函数\n  function show() &#123;\n    console.log('module1 show() ' + data)\n  &#125;\n\n  //向外暴露\n  exports.show = show\n&#125;)\n</code></pre>\n</li>\n<li>module2.js<pre><code>define(function (require, exports, module) &#123;\n  module.exports = &#123;\n    msg: 'I Will Back'\n  &#125;\n&#125;)\n</code></pre>\n</li>\n<li>module3.js<pre><code>define(function (require, exports, module) &#123;\n  const API_KEY = 'abc123'\n  exports.API_KEY = API_KEY\n&#125;)\n</code></pre>\n</li>\n<li>module4.js<pre><code>define(function (require, exports, module) &#123;\n  //引入依赖模块(同步)\n  var module2 = require('./module2')\n\n  function show() &#123;\n    console.log('module4 show() ' + module2.msg)\n  &#125;\n\n  exports.show = show\n  //引入依赖模块(异步)\n  require.async('./module3', function (m3) &#123;\n    console.log('异步引入依赖模块3  ' + m3.API_KEY)\n  &#125;)\n&#125;)\n</code></pre>\n</li>\n<li>main.js : 主 (入口) 模块<pre><code>define(function (require) &#123;\n  var m1 = require('./module1')\n  var m4 = require('./module4')\n  m1.show()\n  m4.show()\n&#125;)\n</code></pre>\n</li>\n</ul>\n<ol start=\"4\">\n<li>index.html:</li>\n</ol>\n<pre><code>&lt;!--\n使用seajs:\n  1. 引入sea.js库\n  2. 如何定义导出模块 :\n    define()\n    exports\n    module.exports\n  3. 如何依赖模块:\n    require()\n  4. 如何使用模块:\n    seajs.use()\n--&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;js/libs/sea.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n  seajs.use('./js/modules/main')\n&lt;/script&gt;\n</code></pre>\n<h1 id=\"es6模块化教程\"><a class=\"anchor\" href=\"#es6模块化教程\">#</a> ES6 模块化教程</h1>\n<h2 id=\"es6-babel-browserify使用教程\"><a class=\"anchor\" href=\"#es6-babel-browserify使用教程\">#</a> ES6-Babel-Browserify 使用教程</h2>\n<ol>\n<li>定义 package.json 文件</li>\n</ol>\n<pre><code>&#123;\n  &quot;name&quot; : &quot;es6-babel-browserify&quot;,\n  &quot;version&quot; : &quot;1.0.0&quot;\n&#125;\n</code></pre>\n<ol start=\"2\">\n<li>安装 babel-cli, babel-preset-es2015 和 browserify</li>\n</ol>\n<ul>\n<li>npm install babel-cli browserify -g\n<ul>\n<li>npm install babel-preset-es2015 --save-dev</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>定义.babelrc 文件<pre><code>&#123;\n&quot;presets&quot;: [&quot;es2015&quot;]\n</code></pre>\n</li>\n</ol>\n<p>}<br />\n```<br />\n4. 编码</p>\n<ul>\n<li>js/src/module1.js<pre><code>export function foo() &#123;\n  console.log('module1 foo()');\n&#125;\nexport let bar = function () &#123;\n  console.log('module1 bar()');\n&#125;\nexport const DATA_ARR = [1, 3, 5, 1]\n</code></pre>\n</li>\n<li>js/src/module2.js<pre><code>let data = 'module2 data'\n\nfunction fun1() &#123;\n  console.log('module2 fun1() ' + data);\n&#125;\n\nfunction fun2() &#123;\n  console.log('module2 fun2() ' + data);\n&#125;\n\nexport &#123;fun1, fun2&#125;\n</code></pre>\n</li>\n<li>js/src/module3.js<pre><code>export default &#123;\n  name: 'Tom',\n  setName: function (name) &#123;\n    this.name = name\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li>js/src/app.js<pre><code>import &#123;foo, bar&#125; from './module1'\nimport &#123;DATA_ARR&#125; from './module1'\nimport &#123;fun1, fun2&#125; from './module2'\nimport person from './module3'\n\nimport $ from 'jquery'\n\n$('body').css('background', 'red')\n\nfoo()\nbar()\nconsole.log(DATA_ARR);\nfun1()\nfun2()\n\nperson.setName('JACK')\nconsole.log(person.name);\n</code></pre>\n</li>\n</ul>\n<ol start=\"5\">\n<li>编译</li>\n</ol>\n<ul>\n<li>使用 Babel 将 ES6 编译为 ES5 代码 (但包含 CommonJS 语法) : babel js/src -d js/lib</li>\n<li>使用 Browserify 编译 js : browserify js/lib/app.js -o js/lib/bundle.js</li>\n</ul>\n<ol start=\"6\">\n<li>页面中引入测试</li>\n</ol>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/bundle.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<ol start=\"7\">\n<li>引入第三方模块 (jQuery)<br />\n 1). 下载 jQuery 模块:\n<ul>\n<li>npm install jquery@1 --save<br />\n2). 在 app.js 中引入并使用</li>\n</ul>\n<pre><code>import $ from 'jquery'\n$('body').css('background', 'red')\n</code></pre>\n</li>\n</ol>\n",
            "tags": [
                "JS"
            ]
        }
    ]
}