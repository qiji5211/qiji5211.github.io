<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>白骨生花 • Posts by &#34;模块化&#34; category</title>
        <link>http://qiji5211.com</link>
        <description>同行者，拿起火把！</description>
        <language>zh-CN</language>
        <pubDate>Thu, 23 Nov 2023 17:30:58 +0800</pubDate>
        <lastBuildDate>Thu, 23 Nov 2023 17:30:58 +0800</lastBuildDate>
        <category>大创</category>
        <category>慧试</category>
        <category>TS</category>
        <category>JS</category>
        <category>Vue3</category>
        <category>HTML5</category>
        <category>CSS3</category>
        <category>pytorch</category>
        <category>NER</category>
        <item>
            <guid isPermalink="true">http://qiji5211.com/2023/11/23/qianduan/JS/mo/%E6%A8%A1%E5%9D%97%E5%8C%96_%E7%AC%94%E8%AE%B0/</guid>
            <title>JS模块化（简版）</title>
            <link>http://qiji5211.com/2023/11/23/qianduan/JS/mo/%E6%A8%A1%E5%9D%97%E5%8C%96_%E7%AC%94%E8%AE%B0/</link>
            <category>JS</category>
            <pubDate>Thu, 23 Nov 2023 17:30:58 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;js模块化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js模块化&#34;&gt;#&lt;/a&gt; JS 模块化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;模块化的理解&lt;/li&gt;
&lt;li&gt;什么是模块？
&lt;ul&gt;
&lt;li&gt;将一个复杂的程序依据一定的规则 (规范) 封装成几个块 (文件), 并进行组合在一起&lt;/li&gt;
&lt;li&gt;块的内部数据 / 实现是私有的，只是向外部暴露一些接口 (方法) 与外部其它模块通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个模块的组成
&lt;ul&gt;
&lt;li&gt;数据 ---&amp;gt; 内部的属性&lt;/li&gt;
&lt;li&gt;操作数据的行为 ---&amp;gt; 内部的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化
&lt;ul&gt;
&lt;li&gt;编码时是按照模块一个一个编码的，整个项目就是一个模块化的项目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化的进化过程
&lt;ul&gt;
&lt;li&gt;全局 function 模式 :
&lt;ul&gt;
&lt;li&gt;编码：全局变量 / 函数&lt;/li&gt;
&lt;li&gt;问题：污染全局命名空间，容易引起命名冲突 / 数据不安全&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;namespace 模式 :
&lt;ul&gt;
&lt;li&gt;编码：将数据 / 行为封装到对象中&lt;/li&gt;
&lt;li&gt;解决：命名冲突 (减少了全局变量)&lt;/li&gt;
&lt;li&gt;问题：数据不安全 (外部可以直接修改模块内部的数据)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IIFE 模式 / 增强
&lt;ul&gt;
&lt;li&gt;IIFE : 立即调用函数表达式 ---&amp;gt; 匿名函数自调用&lt;/li&gt;
&lt;li&gt;编码：将数据和行为封装到一个函数内部，通过给 window 添加属性来向外暴露接口&lt;/li&gt;
&lt;li&gt;引入依赖：通过函数形参来引入依赖模块&lt;pre&gt;&lt;code&gt;(function(window, module2)&amp;#123;
  var data = &#39;atguigu.com&#39;
  function foo() &amp;#123;
     module2.xxx()
     console.log(&#39;foo()&#39;+data)
  &amp;#125;
  function bar() &amp;#123;
     console.log(&#39;bar()&#39;+data)
  &amp;#125;
  
  window.module = &amp;#123;foo&amp;#125;
&amp;#125;)(window, module2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化规范
&lt;ul&gt;
&lt;li&gt;CommonJS
&lt;ul&gt;
&lt;li&gt;Node.js : 服务器端&lt;/li&gt;
&lt;li&gt;Browserify : 浏览器端    也称为 js 的打包工具&lt;/li&gt;
&lt;li&gt;基本语法:
&lt;ul&gt;
&lt;li&gt;定义暴露模块 : exports&lt;pre&gt;&lt;code&gt;exports.xxx = value
module.exports = value
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
引入模块 : require&lt;pre&gt;&lt;code&gt;var module = require(&#39;模块名/模块相对路径&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;引入模块发生在什么时候？
&lt;ul&gt;
&lt;li&gt;Node : 运行时，动态同步引入&lt;/li&gt;
&lt;li&gt;Browserify : 在运行前对模块进行编译 / 转译 / 打包的处理 (已经将依赖的模块包含进来了),&lt;br /&gt;
 运行的是打包生成的 js, 运行时不存在需要再从远程引入依赖模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AMD : 浏览器端
&lt;ul&gt;
&lt;li&gt;require.js&lt;/li&gt;
&lt;li&gt;基本语法
&lt;ul&gt;
&lt;li&gt;定义暴露模块: define ([依赖模块名], function (){return 模块对象})&lt;/li&gt;
&lt;li&gt;引入模块: require ([&#39; 模块 1&#39;, &#39; 模块 2&#39;, &#39; 模块 3&#39;], function (m1, m2){// 使用模块对象})&lt;/li&gt;
&lt;li&gt;配置:&lt;pre&gt;&lt;code&gt;require.config(&amp;#123;
  //基本路径
  baseUrl : &#39;js/&#39;,
  //标识名称与路径的映射
  paths : &amp;#123;
    &#39;模块1&#39; : &#39;modules/模块1&#39;,
    &#39;模块2&#39; : &#39;modules/模块2&#39;,
    &#39;angular&#39; : &#39;libs/angular&#39;,
    &#39;angular-messages&#39; : &#39;libs/angular-messages&#39;
  &amp;#125;,
  //非AMD的模块
  shim : &amp;#123;
    &#39;angular&#39; : &amp;#123;
        exports : &#39;angular&#39;
    &amp;#125;,
    &#39;angular-messages&#39; : &amp;#123;
        exports : &#39;angular-messages&#39;,
        deps : [&#39;angular&#39;]
    &amp;#125;
  &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMD : 浏览器端
&lt;ul&gt;
&lt;li&gt;sea.js&lt;/li&gt;
&lt;li&gt;基本语法
&lt;ul&gt;
&lt;li&gt;定义暴露模块:&lt;pre&gt;&lt;code&gt;define(function(require, module, exports)&amp;#123;
  通过require引入依赖模块
  通过module/exports来暴露模块
  exports.xxx = value
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;使用模块 seajs.use ([&#39; 模块 1&#39;, &#39; 模块 2&#39;])&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ES6
&lt;ul&gt;
&lt;li&gt;ES6 内置了模块化的实现&lt;/li&gt;
&lt;li&gt;基本语法
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义暴露模块 : export&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;暴露一个对象:&lt;pre&gt;&lt;code&gt;export default 对象
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;暴露多个:&lt;pre&gt;&lt;code&gt;export var xxx = value1
export let yyy = value2

var xxx = value1
let yyy = value2
export &amp;#123;xxx, yyy&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入使用模块 : import&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default 模块:&lt;pre&gt;&lt;code&gt;import xxx  from &#39;模块路径/模块名&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;其它模块&lt;pre&gt;&lt;code&gt;import &amp;#123;xxx, yyy&amp;#125; from &#39;模块路径/模块名&#39;
import * as module1 from &#39;模块路径/模块名&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问题：所有浏览器还不能直接识别 ES6 模块化的语法&lt;/li&gt;
&lt;li&gt;解决:
&lt;ul&gt;
&lt;li&gt;使用 Babel 将 ES6---&amp;gt;ES5 (使用了 CommonJS) ---- 浏览器还不能直接支行&lt;/li&gt;
&lt;li&gt;使用 Browserify---&amp;gt; 打包处理 ---- 浏览器可以运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://qiji5211.com/2023/11/23/qianduan/JS/mo/1_%E6%A8%A1%E5%9D%97%E5%8C%96%E8%BF%9B%E5%8C%96%E5%8F%B2%E6%95%99%E7%A8%8B/</guid>
            <title>JS模块化</title>
            <link>http://qiji5211.com/2023/11/23/qianduan/JS/mo/1_%E6%A8%A1%E5%9D%97%E5%8C%96%E8%BF%9B%E5%8C%96%E5%8F%B2%E6%95%99%E7%A8%8B/</link>
            <category>JS</category>
            <pubDate>Thu, 23 Nov 2023 17:30:58 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;模块化进化史教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块化进化史教程&#34;&gt;#&lt;/a&gt; 模块化进化史教程&lt;/h1&gt;
&lt;h2 id=&#34;模块化进化史教程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块化进化史教程-2&#34;&gt;#&lt;/a&gt; 模块化进化史教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;全局 function 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module1.js&lt;pre&gt;&lt;code&gt;//数据
let data = &#39;atguigu.com&#39;

//操作数据的函数
function foo() &amp;#123;
  console.log(`foo() $&amp;#123;data&amp;#125;`)
&amp;#125;
function bar() &amp;#123;
  console.log(`bar() $&amp;#123;data&amp;#125;`)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module2.js&lt;pre&gt;&lt;code&gt;let data2 = &#39;other data&#39;

function foo() &amp;#123;  //与另一个模块中的函数冲突了
  console.log(`foo() $&amp;#123;data2&amp;#125;`)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;test1.html&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

  let data = &amp;quot;修改后的数据&amp;quot;
  foo()
  bar()
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;说明:
&lt;ul&gt;
&lt;li&gt;全局函数模式：将不同的功能封装成不同的全局函数&lt;/li&gt;
&lt;li&gt;问题: Global 被污染了，很容易引起命名冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;namespace 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module1.js&lt;pre&gt;&lt;code&gt;let myModule = &amp;#123;
  data: &#39;atguigu.com&#39;,
  foo() &amp;#123;
    console.log(`foo() $&amp;#123;this.data&amp;#125;`)
  &amp;#125;,
  bar() &amp;#123;
    console.log(`bar() $&amp;#123;this.data&amp;#125;`)
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module2.js&lt;pre&gt;&lt;code&gt;let myModule2 = &amp;#123;
  data: &#39;atguigu.com2222&#39;,
  foo() &amp;#123;
    console.log(`foo() $&amp;#123;this.data&amp;#125;`)
  &amp;#125;,
  bar() &amp;#123;
    console.log(`bar() $&amp;#123;this.data&amp;#125;`)
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;test2.html&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module22.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  myModule.foo()
  myModule.bar()

  myModule2.foo()
  myModule2.bar()

  myModule.data = &#39;other data&#39; //能直接修改模块内部的数据
  myModule.foo()

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;说明
&lt;ul&gt;
&lt;li&gt;namespace 模式：简单对象封装&lt;/li&gt;
&lt;li&gt;作用：减少了全局变量&lt;/li&gt;
&lt;li&gt;问题：不安全&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;IIFE 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module3.js&lt;pre&gt;&lt;code&gt;(function (window) &amp;#123;
  //数据
  let data = &#39;atguigu.com&#39;

  //操作数据的函数
  function foo() &amp;#123; //用于暴露有函数
    console.log(`foo() $&amp;#123;data&amp;#125;`)
  &amp;#125;

  function bar() &amp;#123;//用于暴露有函数
    console.log(`bar() $&amp;#123;data&amp;#125;`)
    otherFun() //内部调用
  &amp;#125;

  function otherFun() &amp;#123; //内部私有的函数
    console.log(&#39;otherFun()&#39;)
  &amp;#125;

  //暴露行为
  window.myModule = &amp;#123;foo, bar&amp;#125;
&amp;#125;)(window)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;test3.html&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  myModule.foo()
  myModule.bar()
  //myModule.otherFun()  //myModule.otherFun is not a function
  console.log(myModule.data) //undefined 不能访问模块内部数据
  myModule.data = &#39;xxxx&#39; //不是修改的模块内部的data
  myModule.foo() //没有改变

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;说明:
&lt;ul&gt;
&lt;li&gt;IIFE 模式：匿名函数自调用 (闭包)&lt;/li&gt;
&lt;li&gt;IIFE : immediately-invoked function expression (立即调用函数表达式)&lt;/li&gt;
&lt;li&gt;作用：数据是私有的，外部只能通过暴露的方法操作&lt;/li&gt;
&lt;li&gt;问题：如果当前这个模块依赖另一个模块怎么办？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;IIFE 模式增强&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;引入 jquery 到项目中&lt;/li&gt;
&lt;li&gt;module4.js&lt;pre&gt;&lt;code&gt;(function (window, $) &amp;#123;
  //数据
  let data = &#39;atguigu.com&#39;

  //操作数据的函数
  function foo() &amp;#123; //用于暴露有函数
    console.log(`foo() $&amp;#123;data&amp;#125;`)
    $(&#39;body&#39;).css(&#39;background&#39;, &#39;red&#39;)
  &amp;#125;

  function bar() &amp;#123;//用于暴露有函数
    console.log(`bar() $&amp;#123;data&amp;#125;`)
    otherFun() //内部调用
  &amp;#125;

  function otherFun() &amp;#123; //内部私有的函数
    console.log(&#39;otherFun()&#39;)
  &amp;#125;

  //暴露行为
  window.myModule = &amp;#123;foo, bar&amp;#125;
&amp;#125;)(window, jQuery)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;test4.html&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-1.10.1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module4.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  myModule.foo()
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;说明
&lt;ul&gt;
&lt;li&gt;IIFE 模式增强：引入依赖&lt;/li&gt;
&lt;li&gt;这就是现代模块实现的基石&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;页面加载多个 js 的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;页面:&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module4.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;说明
&lt;ul&gt;
&lt;li&gt;一个页面需要引入多个 js 文件&lt;/li&gt;
&lt;li&gt;问题:
&lt;ul&gt;
&lt;li&gt;请求过多&lt;/li&gt;
&lt;li&gt;依赖模糊&lt;/li&gt;
&lt;li&gt;难以维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这些问题可以通过现代模块化编码和项目构建来解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;commonjs_node模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#commonjs_node模块化教程&#34;&gt;#&lt;/a&gt; CommonJS_Node 模块化教程&lt;/h1&gt;
&lt;h2 id=&#34;nodejs模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nodejs模块化教程&#34;&gt;#&lt;/a&gt; Node.js 模块化教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载安装 node.js&lt;/li&gt;
&lt;li&gt;创建项目结构&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;|-modules
  |-module1.js
  |-module2.js
  |-module3.js
|-app.js
|-package.json
  &amp;#123;
    &amp;quot;name&amp;quot;: &amp;quot;commonJS-node&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;下载第三方模块&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;npm install uniq --save&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;模块化编码&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module1.js&lt;pre&gt;&lt;code&gt;module.exports = &amp;#123;
  foo() &amp;#123;
    console.log(&#39;moudle1 foo()&#39;)
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module2.js&lt;pre&gt;&lt;code&gt;module.exports = function () &amp;#123;
  console.log(&#39;module2()&#39;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module3.js&lt;pre&gt;&lt;code&gt;exports.foo = function () &amp;#123;
  console.log(&#39;module3 foo()&#39;)
&amp;#125;

exports.bar = function () &amp;#123;
  console.log(&#39;module3 bar()&#39;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;app.js&lt;pre&gt;&lt;code&gt;/**
  1. 定义暴露模块:
    module.exports = value;
    exports.xxx = value;
  2. 引入模块:
    var module = require(模块名或模块路径);
 */
&amp;quot;use strict&amp;quot;;
//引用模块
let module1 = require(&#39;./modules/module1&#39;)
let module2 = require(&#39;./modules/module2&#39;)
let module3 = require(&#39;./modules/module3&#39;)

let uniq = require(&#39;uniq&#39;)
let fs = require(&#39;fs&#39;)

//使用模块
module1.foo()
module2()
module3.foo()
module3.bar()

console.log(uniq([1, 3, 1, 4, 3]))

fs.readFile(&#39;app.js&#39;, function (error, data) &amp;#123;
  console.log(data.toString())
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;通过 node 运行 app.js&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;命令: node app.js&lt;/li&gt;
&lt;li&gt;工具：右键 --&amp;gt; 运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;commonjs-browserify模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#commonjs-browserify模块化教程&#34;&gt;#&lt;/a&gt; CommonJS-Browserify 模块化教程&lt;/h1&gt;
&lt;h2 id=&#34;browserify模块化使用教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#browserify模块化使用教程&#34;&gt;#&lt;/a&gt; Browserify 模块化使用教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建项目结构&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;|-js
  |-dist //打包生成文件的目录
  |-src //源码所在的目录
    |-module1.js
    |-module2.js
    |-module3.js
    |-app.js //应用主源文件
|-index.html
|-package.json
  &amp;#123;
    &amp;quot;name&amp;quot;: &amp;quot;browserify-test&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;下载 browserify&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;全局: npm install browserify -g&lt;/li&gt;
&lt;li&gt;局部: npm install browserify --save-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;定义模块代码&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module1.js&lt;pre&gt;&lt;code&gt;module.exports = &amp;#123;
  foo() &amp;#123;
    console.log(&#39;moudle1 foo()&#39;)
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module2.js&lt;pre&gt;&lt;code&gt;module.exports = function () &amp;#123;
  console.log(&#39;module2()&#39;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module3.js&lt;pre&gt;&lt;code&gt;exports.foo = function () &amp;#123;
  console.log(&#39;module3 foo()&#39;)
&amp;#125;

exports.bar = function () &amp;#123;
  console.log(&#39;module3 bar()&#39;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;app.js (应用的主 js)&lt;pre&gt;&lt;code&gt;//引用模块
let module1 = require(&#39;./module1&#39;)
let module2 = require(&#39;./module2&#39;)
let module3 = require(&#39;./module3&#39;)

let uniq = require(&#39;uniq&#39;)

//使用模块
module1.foo()
module2()
module3.foo()
module3.bar()

console.log(uniq([1, 3, 1, 4, 3]))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;打包处理 js:
&lt;ul&gt;
&lt;li&gt;browserify js/src/app.js -o js/dist/bundle.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;页面使用引入:&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/dist/bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;amd-requirejs模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#amd-requirejs模块化教程&#34;&gt;#&lt;/a&gt; AMD-RequireJS 模块化教程&lt;/h1&gt;
&lt;h2 id=&#34;requirejs使用教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#requirejs使用教程&#34;&gt;#&lt;/a&gt; require.js 使用教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载 require.js, 并引入&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;官网: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5yZXF1aXJlanMuY24v&#34;&gt;http://www.requirejs.cn/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;github : &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JlcXVpcmVqcy9yZXF1aXJlanM=&#34;&gt;https://github.com/requirejs/requirejs&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;将 require.js 导入项目: js/libs/require.js&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;创建项目结构&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;|-js
  |-libs
    |-require.js
  |-modules
    |-alerter.js
    |-dataService.js
  |-main.js
|-index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;定义 require.js 的模块代码&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;dataService.js&lt;pre&gt;&lt;code&gt;define(function () &amp;#123;
  let msg = &#39;atguigu.com&#39;

  function getMsg() &amp;#123;
    return msg.toUpperCase()
  &amp;#125;

  return &amp;#123;getMsg&amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;alerter.js&lt;pre&gt;&lt;code&gt;define([&#39;dataService&#39;, &#39;jquery&#39;], function (dataService, $) &amp;#123;
  let name = &#39;Tom2&#39;

  function showMsg() &amp;#123;
    $(&#39;body&#39;).css(&#39;background&#39;, &#39;gray&#39;)
    alert(dataService.getMsg() + &#39;, &#39; + name)
  &amp;#125;

  return &amp;#123;showMsg&amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;应用主 (入口) js: main.js&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;(function () &amp;#123;
  //配置
  require.config(&amp;#123;
    //基本路径
    baseUrl: &amp;quot;js/&amp;quot;,
    //模块标识名与模块路径映射
    paths: &amp;#123;
      &amp;quot;alerter&amp;quot;: &amp;quot;modules/alerter&amp;quot;,
      &amp;quot;dataService&amp;quot;: &amp;quot;modules/dataService&amp;quot;,
    &amp;#125;
  &amp;#125;)
  //引入使用模块
  require( [&#39;alerter&#39;], function(alerter) &amp;#123;
    alerter.showMsg()
  &amp;#125;)
&amp;#125;)()
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;页面使用模块:&lt;br /&gt;
&amp;lt;script data-main=&amp;quot;js/main&amp;quot; src=&amp;quot;js/libs/require.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;使用第三方基于 require.js 的框架 (jquery)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将 jquery 的库文件导入到项目:
&lt;ul&gt;
&lt;li&gt;js/libs/jquery-1.10.1.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 main.js 中配置 jquery 路径&lt;pre&gt;&lt;code&gt;paths: &amp;#123;
          &#39;jquery&#39;: &#39;libs/jquery-1.10.1&#39;
      &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;在 alerter.js 中使用 jquery&lt;pre&gt;&lt;code&gt;define([&#39;dataService&#39;, &#39;jquery&#39;], function (dataService, $) &amp;#123;
    var name = &#39;xfzhang&#39;
    function showMsg() &amp;#123;
        $(&#39;body&#39;).css(&amp;#123;background : &#39;red&#39;&amp;#125;)
        alert(name + &#39; &#39;+dataService.getMsg())
    &amp;#125;
    return &amp;#123;showMsg&amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;使用第三方不基于 require.js 的框架 (angular/angular-messages)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将 angular.js 和 angular-messages.js 导入项目
&lt;ul&gt;
&lt;li&gt;js/libs/angular.js&lt;/li&gt;
&lt;li&gt;js/libs/angular-messages.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 main.js 中配置&lt;pre&gt;&lt;code&gt;(function () &amp;#123;
  require.config(&amp;#123;
    //基本路径
    baseUrl: &amp;quot;js/&amp;quot;,
    //模块标识名与模块路径映射
    paths: &amp;#123;
      //第三方库
      &#39;jquery&#39; : &#39;libs/jquery-1.10.1&#39;,
      &#39;angular&#39; : &#39;libs/angular&#39;,
      &#39;angular-messages&#39; : &#39;libs/angular-messages&#39;,
      //自定义模块
      &amp;quot;alerter&amp;quot;: &amp;quot;modules/alerter&amp;quot;,
      &amp;quot;dataService&amp;quot;: &amp;quot;modules/dataService&amp;quot;
    &amp;#125;,
    /*
     配置不兼容AMD的模块
     exports : 指定导出的模块名
     deps  : 指定所有依赖的模块的数组
     */
    shim: &amp;#123;
      &#39;angular&#39; : &amp;#123;
        exports : &#39;angular&#39;
      &amp;#125;,
      &#39;angular-messages&#39; : &amp;#123;
        exports : &#39;angular-messages&#39;,
        deps : [&#39;angular&#39;]
      &amp;#125;
    &amp;#125;
  &amp;#125;)
  //引入使用模块
  require( [&#39;alerter&#39;, &#39;angular&#39;, &#39;angular-messages&#39;], function(alerter, angular) &amp;#123;
    alerter.showMsg()
    angular.module(&#39;myApp&#39;, [&#39;ngMessages&#39;])
    angular.bootstrap(document,[&amp;quot;myApp&amp;quot;])
  &amp;#125;)
&amp;#125;)()
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;页面:&lt;pre&gt;&lt;code&gt;&amp;lt;form name=&amp;quot;myForm&amp;quot;&amp;gt;
  用户名: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; ng-model=&amp;quot;username&amp;quot; ng-required=&amp;quot;true&amp;quot;&amp;gt;
  &amp;lt;div style=&amp;quot;color: red;&amp;quot; ng-show=&amp;quot;myForm.username.$dirty&amp;amp;&amp;amp;myForm.username.$invalid&amp;quot;&amp;gt;用户名是必须的&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cmd-seajs模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cmd-seajs模块化教程&#34;&gt;#&lt;/a&gt; CMD-SeaJS. 模块化教程&lt;/h1&gt;
&lt;h2 id=&#34;seajs简单使用教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#seajs简单使用教程&#34;&gt;#&lt;/a&gt; sea.js 简单使用教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载 sea.js, 并引入&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;官网: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlYWpzLm9yZy8=&#34;&gt;http://seajs.org/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;github : &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NlYWpzL3NlYWpz&#34;&gt;https://github.com/seajs/seajs&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;将 sea.js 导入项目: js/libs/sea.js&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;创建项目结构&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;|-js
  |-libs
    |-sea.js
  |-modules
    |-module1.js
    |-module2.js
    |-module3.js
    |-module4.js
    |-main.js
|-index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;定义 sea.js 的模块代码&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module1.js&lt;pre&gt;&lt;code&gt;define(function (require, exports, module) &amp;#123;
  //内部变量数据
  var data = &#39;atguigu.com&#39;
  //内部函数
  function show() &amp;#123;
    console.log(&#39;module1 show() &#39; + data)
  &amp;#125;

  //向外暴露
  exports.show = show
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module2.js&lt;pre&gt;&lt;code&gt;define(function (require, exports, module) &amp;#123;
  module.exports = &amp;#123;
    msg: &#39;I Will Back&#39;
  &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module3.js&lt;pre&gt;&lt;code&gt;define(function (require, exports, module) &amp;#123;
  const API_KEY = &#39;abc123&#39;
  exports.API_KEY = API_KEY
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module4.js&lt;pre&gt;&lt;code&gt;define(function (require, exports, module) &amp;#123;
  //引入依赖模块(同步)
  var module2 = require(&#39;./module2&#39;)

  function show() &amp;#123;
    console.log(&#39;module4 show() &#39; + module2.msg)
  &amp;#125;

  exports.show = show
  //引入依赖模块(异步)
  require.async(&#39;./module3&#39;, function (m3) &amp;#123;
    console.log(&#39;异步引入依赖模块3  &#39; + m3.API_KEY)
  &amp;#125;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;main.js : 主 (入口) 模块&lt;pre&gt;&lt;code&gt;define(function (require) &amp;#123;
  var m1 = require(&#39;./module1&#39;)
  var m4 = require(&#39;./module4&#39;)
  m1.show()
  m4.show()
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;index.html:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!--
使用seajs:
  1. 引入sea.js库
  2. 如何定义导出模块 :
    define()
    exports
    module.exports
  3. 如何依赖模块:
    require()
  4. 如何使用模块:
    seajs.use()
--&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/libs/sea.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  seajs.use(&#39;./js/modules/main&#39;)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;es6模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es6模块化教程&#34;&gt;#&lt;/a&gt; ES6 模块化教程&lt;/h1&gt;
&lt;h2 id=&#34;es6-babel-browserify使用教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es6-babel-browserify使用教程&#34;&gt;#&lt;/a&gt; ES6-Babel-Browserify 使用教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;定义 package.json 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;
  &amp;quot;name&amp;quot; : &amp;quot;es6-babel-browserify&amp;quot;,
  &amp;quot;version&amp;quot; : &amp;quot;1.0.0&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;安装 babel-cli, babel-preset-es2015 和 browserify&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;npm install babel-cli browserify -g
&lt;ul&gt;
&lt;li&gt;npm install babel-preset-es2015 --save-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;定义.babelrc 文件&lt;pre&gt;&lt;code&gt;&amp;#123;
&amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;}&lt;br /&gt;
```&lt;br /&gt;
4. 编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;js/src/module1.js&lt;pre&gt;&lt;code&gt;export function foo() &amp;#123;
  console.log(&#39;module1 foo()&#39;);
&amp;#125;
export let bar = function () &amp;#123;
  console.log(&#39;module1 bar()&#39;);
&amp;#125;
export const DATA_ARR = [1, 3, 5, 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;js/src/module2.js&lt;pre&gt;&lt;code&gt;let data = &#39;module2 data&#39;

function fun1() &amp;#123;
  console.log(&#39;module2 fun1() &#39; + data);
&amp;#125;

function fun2() &amp;#123;
  console.log(&#39;module2 fun2() &#39; + data);
&amp;#125;

export &amp;#123;fun1, fun2&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;js/src/module3.js&lt;pre&gt;&lt;code&gt;export default &amp;#123;
  name: &#39;Tom&#39;,
  setName: function (name) &amp;#123;
    this.name = name
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;js/src/app.js&lt;pre&gt;&lt;code&gt;import &amp;#123;foo, bar&amp;#125; from &#39;./module1&#39;
import &amp;#123;DATA_ARR&amp;#125; from &#39;./module1&#39;
import &amp;#123;fun1, fun2&amp;#125; from &#39;./module2&#39;
import person from &#39;./module3&#39;

import $ from &#39;jquery&#39;

$(&#39;body&#39;).css(&#39;background&#39;, &#39;red&#39;)

foo()
bar()
console.log(DATA_ARR);
fun1()
fun2()

person.setName(&#39;JACK&#39;)
console.log(person.name);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;编译&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;使用 Babel 将 ES6 编译为 ES5 代码 (但包含 CommonJS 语法) : babel js/src -d js/lib&lt;/li&gt;
&lt;li&gt;使用 Browserify 编译 js : browserify js/lib/app.js -o js/lib/bundle.js&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;页面中引入测试&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/lib/bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;引入第三方模块 (jQuery)&lt;br /&gt;
 1). 下载 jQuery 模块:
&lt;ul&gt;
&lt;li&gt;npm install jquery@1 --save&lt;br /&gt;
2). 在 app.js 中引入并使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;import $ from &#39;jquery&#39;
$(&#39;body&#39;).css(&#39;background&#39;, &#39;red&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
    </channel>
</rss>
