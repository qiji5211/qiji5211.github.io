{
    "version": "https://jsonfeed.org/version/1",
    "title": "白骨生花 • All posts by \"js\" category",
    "description": "同行者，拿起火把！",
    "home_page_url": "http://qiji5211.com",
    "items": [
        {
            "id": "http://qiji5211.com/2023/11/23/qianduan/JS/mo/%E6%A8%A1%E5%9D%97%E5%8C%96_%E7%AC%94%E8%AE%B0/",
            "url": "http://qiji5211.com/2023/11/23/qianduan/JS/mo/%E6%A8%A1%E5%9D%97%E5%8C%96_%E7%AC%94%E8%AE%B0/",
            "title": "JS模块化（简版）",
            "date_published": "2023-11-23T09:30:58.000Z",
            "content_html": "<h2 id=\"js模块化\"><a class=\"anchor\" href=\"#js模块化\">#</a> JS 模块化</h2>\n<ul>\n<li>模块化的理解</li>\n<li>什么是模块？\n<ul>\n<li>将一个复杂的程序依据一定的规则 (规范) 封装成几个块 (文件), 并进行组合在一起</li>\n<li>块的内部数据 / 实现是私有的，只是向外部暴露一些接口 (方法) 与外部其它模块通信</li>\n</ul>\n</li>\n<li>一个模块的组成\n<ul>\n<li>数据 ---&gt; 内部的属性</li>\n<li>操作数据的行为 ---&gt; 内部的函数</li>\n</ul>\n</li>\n<li>模块化\n<ul>\n<li>编码时是按照模块一个一个编码的，整个项目就是一个模块化的项目</li>\n</ul>\n</li>\n<li>模块化的进化过程\n<ul>\n<li>全局 function 模式 :\n<ul>\n<li>编码：全局变量 / 函数</li>\n<li>问题：污染全局命名空间，容易引起命名冲突 / 数据不安全</li>\n</ul>\n</li>\n<li>namespace 模式 :\n<ul>\n<li>编码：将数据 / 行为封装到对象中</li>\n<li>解决：命名冲突 (减少了全局变量)</li>\n<li>问题：数据不安全 (外部可以直接修改模块内部的数据)</li>\n</ul>\n</li>\n<li>IIFE 模式 / 增强\n<ul>\n<li>IIFE : 立即调用函数表达式 ---&gt; 匿名函数自调用</li>\n<li>编码：将数据和行为封装到一个函数内部，通过给 window 添加属性来向外暴露接口</li>\n<li>引入依赖：通过函数形参来引入依赖模块<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(window, module2)&#123;</span><br><span class=\"line\">  var data = &#x27;atguigu.com&#x27;</span><br><span class=\"line\">  function foo() &#123;</span><br><span class=\"line\">     module2.xxx()</span><br><span class=\"line\">     console.log(&#x27;foo()&#x27;+data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  function bar() &#123;</span><br><span class=\"line\">     console.log(&#x27;bar()&#x27;+data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  window.module = &#123;foo&#125;</span><br><span class=\"line\">&#125;)(window, module2)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>模块化规范\n<ul>\n<li>CommonJS\n<ul>\n<li>Node.js : 服务器端</li>\n<li>Browserify : 浏览器端    也称为 js 的打包工具</li>\n<li>基本语法:\n<ul>\n<li>定义暴露模块 : exports<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.xxx = value</span><br><span class=\"line\">module.exports = value</span><br></pre></td></tr></table></figure><br />\n 引入模块 : require<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var module = require(&#x27;模块名/模块相对路径&#x27;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>引入模块发生在什么时候？\n<ul>\n<li>Node : 运行时，动态同步引入</li>\n<li>Browserify : 在运行前对模块进行编译 / 转译 / 打包的处理 (已经将依赖的模块包含进来了),<br />\n 运行的是打包生成的 js, 运行时不存在需要再从远程引入依赖模块</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>AMD : 浏览器端\n<ul>\n<li>require.js</li>\n<li>基本语法\n<ul>\n<li>定义暴露模块: define ([依赖模块名], function (){return 模块对象})</li>\n<li>引入模块: require ([' 模块 1', ' 模块 2', ' 模块 3'], function (m1, m2){// 使用模块对象})</li>\n<li>配置:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require.config(&#123;</span><br><span class=\"line\">  //基本路径</span><br><span class=\"line\">  baseUrl : &#x27;js/&#x27;,</span><br><span class=\"line\">  //标识名称与路径的映射</span><br><span class=\"line\">  paths : &#123;</span><br><span class=\"line\">    &#x27;模块1&#x27; : &#x27;modules/模块1&#x27;,</span><br><span class=\"line\">    &#x27;模块2&#x27; : &#x27;modules/模块2&#x27;,</span><br><span class=\"line\">    &#x27;angular&#x27; : &#x27;libs/angular&#x27;,</span><br><span class=\"line\">    &#x27;angular-messages&#x27; : &#x27;libs/angular-messages&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  //非AMD的模块</span><br><span class=\"line\">  shim : &#123;</span><br><span class=\"line\">    &#x27;angular&#x27; : &#123;</span><br><span class=\"line\">        exports : &#x27;angular&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x27;angular-messages&#x27; : &#123;</span><br><span class=\"line\">        exports : &#x27;angular-messages&#x27;,</span><br><span class=\"line\">        deps : [&#x27;angular&#x27;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>CMD : 浏览器端\n<ul>\n<li>sea.js</li>\n<li>基本语法\n<ul>\n<li>定义暴露模块:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(function(require, module, exports)&#123;</span><br><span class=\"line\">  通过require引入依赖模块</span><br><span class=\"line\">  通过module/exports来暴露模块</span><br><span class=\"line\">  exports.xxx = value</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>使用模块 seajs.use ([' 模块 1', ' 模块 2'])</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ES6\n<ul>\n<li>ES6 内置了模块化的实现</li>\n<li>基本语法\n<ul>\n<li>\n<p>定义暴露模块 : export</p>\n<ul>\n<li>暴露一个对象:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default 对象</span><br></pre></td></tr></table></figure></li>\n<li>暴露多个:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export var xxx = value1</span><br><span class=\"line\">export let yyy = value2</span><br><span class=\"line\"></span><br><span class=\"line\">var xxx = value1</span><br><span class=\"line\">let yyy = value2</span><br><span class=\"line\">export &#123;xxx, yyy&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>引入使用模块 : import</p>\n<ul>\n<li>default 模块:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import xxx  from &#x27;模块路径/模块名&#x27;</span><br></pre></td></tr></table></figure></li>\n<li>其它模块<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;xxx, yyy&#125; from &#x27;模块路径/模块名&#x27;</span><br><span class=\"line\">import * as module1 from &#x27;模块路径/模块名&#x27;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>问题：所有浏览器还不能直接识别 ES6 模块化的语法</li>\n<li>解决:\n<ul>\n<li>使用 Babel 将 ES6---&gt;ES5 (使用了 CommonJS) ---- 浏览器还不能直接支行</li>\n<li>使用 Browserify---&gt; 打包处理 ---- 浏览器可以运行</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "http://qiji5211.com/2023/11/23/qianduan/JS/mo/1_%E6%A8%A1%E5%9D%97%E5%8C%96%E8%BF%9B%E5%8C%96%E5%8F%B2%E6%95%99%E7%A8%8B/",
            "url": "http://qiji5211.com/2023/11/23/qianduan/JS/mo/1_%E6%A8%A1%E5%9D%97%E5%8C%96%E8%BF%9B%E5%8C%96%E5%8F%B2%E6%95%99%E7%A8%8B/",
            "title": "JS模块化",
            "date_published": "2023-11-23T09:30:58.000Z",
            "content_html": "<h1 id=\"模块化进化史教程\"><a class=\"anchor\" href=\"#模块化进化史教程\">#</a> 模块化进化史教程</h1>\n<h2 id=\"模块化进化史教程-2\"><a class=\"anchor\" href=\"#模块化进化史教程-2\">#</a> 模块化进化史教程</h2>\n<ol>\n<li>全局 function 模式</li>\n</ol>\n<ul>\n<li>module1.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数据</span><br><span class=\"line\">let data = &#x27;atguigu.com&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//操作数据的函数</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(`foo() $&#123;data&#125;`)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function bar() &#123;</span><br><span class=\"line\">  console.log(`bar() $&#123;data&#125;`)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>module2.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let data2 = &#x27;other data&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">function foo() &#123;  //与另一个模块中的函数冲突了</span><br><span class=\"line\">  console.log(`foo() $&#123;data2&#125;`)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>test1.html<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;module1.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  let data = &quot;修改后的数据&quot;</span><br><span class=\"line\">  foo()</span><br><span class=\"line\">  bar()</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>说明:\n<ul>\n<li>全局函数模式：将不同的功能封装成不同的全局函数</li>\n<li>问题: Global 被污染了，很容易引起命名冲突</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>namespace 模式</li>\n</ol>\n<ul>\n<li>module1.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myModule = &#123;</span><br><span class=\"line\">  data: &#x27;atguigu.com&#x27;,</span><br><span class=\"line\">  foo() &#123;</span><br><span class=\"line\">    console.log(`foo() $&#123;this.data&#125;`)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bar() &#123;</span><br><span class=\"line\">    console.log(`bar() $&#123;this.data&#125;`)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>module2.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let myModule2 = &#123;</span><br><span class=\"line\">  data: &#x27;atguigu.com2222&#x27;,</span><br><span class=\"line\">  foo() &#123;</span><br><span class=\"line\">    console.log(`foo() $&#123;this.data&#125;`)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  bar() &#123;</span><br><span class=\"line\">    console.log(`bar() $&#123;this.data&#125;`)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>test2.html<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;module22.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  myModule.foo()</span><br><span class=\"line\">  myModule.bar()</span><br><span class=\"line\"></span><br><span class=\"line\">  myModule2.foo()</span><br><span class=\"line\">  myModule2.bar()</span><br><span class=\"line\"></span><br><span class=\"line\">  myModule.data = &#x27;other data&#x27; //能直接修改模块内部的数据</span><br><span class=\"line\">  myModule.foo()</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>说明\n<ul>\n<li>namespace 模式：简单对象封装</li>\n<li>作用：减少了全局变量</li>\n<li>问题：不安全</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>IIFE 模式</li>\n</ol>\n<ul>\n<li>module3.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (window) &#123;</span><br><span class=\"line\">  //数据</span><br><span class=\"line\">  let data = &#x27;atguigu.com&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  //操作数据的函数</span><br><span class=\"line\">  function foo() &#123; //用于暴露有函数</span><br><span class=\"line\">    console.log(`foo() $&#123;data&#125;`)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function bar() &#123;//用于暴露有函数</span><br><span class=\"line\">    console.log(`bar() $&#123;data&#125;`)</span><br><span class=\"line\">    otherFun() //内部调用</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function otherFun() &#123; //内部私有的函数</span><br><span class=\"line\">    console.log(&#x27;otherFun()&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //暴露行为</span><br><span class=\"line\">  window.myModule = &#123;foo, bar&#125;</span><br><span class=\"line\">&#125;)(window)</span><br></pre></td></tr></table></figure></li>\n<li>test3.html<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;module3.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  myModule.foo()</span><br><span class=\"line\">  myModule.bar()</span><br><span class=\"line\">  //myModule.otherFun()  //myModule.otherFun is not a function</span><br><span class=\"line\">  console.log(myModule.data) //undefined 不能访问模块内部数据</span><br><span class=\"line\">  myModule.data = &#x27;xxxx&#x27; //不是修改的模块内部的data</span><br><span class=\"line\">  myModule.foo() //没有改变</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>说明:\n<ul>\n<li>IIFE 模式：匿名函数自调用 (闭包)</li>\n<li>IIFE : immediately-invoked function expression (立即调用函数表达式)</li>\n<li>作用：数据是私有的，外部只能通过暴露的方法操作</li>\n<li>问题：如果当前这个模块依赖另一个模块怎么办？</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>IIFE 模式增强</li>\n</ol>\n<ul>\n<li>引入 jquery 到项目中</li>\n<li>module4.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function (window, $) &#123;</span><br><span class=\"line\">  //数据</span><br><span class=\"line\">  let data = &#x27;atguigu.com&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  //操作数据的函数</span><br><span class=\"line\">  function foo() &#123; //用于暴露有函数</span><br><span class=\"line\">    console.log(`foo() $&#123;data&#125;`)</span><br><span class=\"line\">    $(&#x27;body&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function bar() &#123;//用于暴露有函数</span><br><span class=\"line\">    console.log(`bar() $&#123;data&#125;`)</span><br><span class=\"line\">    otherFun() //内部调用</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  function otherFun() &#123; //内部私有的函数</span><br><span class=\"line\">    console.log(&#x27;otherFun()&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //暴露行为</span><br><span class=\"line\">  window.myModule = &#123;foo, bar&#125;</span><br><span class=\"line\">&#125;)(window, jQuery)</span><br></pre></td></tr></table></figure></li>\n<li>test4.html<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.10.1.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;module4.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  myModule.foo()</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>说明\n<ul>\n<li>IIFE 模式增强：引入依赖</li>\n<li>这就是现代模块实现的基石</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>页面加载多个 js 的问题</li>\n</ol>\n<ul>\n<li>页面:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;module1.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;module3.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;module4.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>说明\n<ul>\n<li>一个页面需要引入多个 js 文件</li>\n<li>问题:\n<ul>\n<li>请求过多</li>\n<li>依赖模糊</li>\n<li>难以维护</li>\n</ul>\n</li>\n<li>这些问题可以通过现代模块化编码和项目构建来解决</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"commonjs_node模块化教程\"><a class=\"anchor\" href=\"#commonjs_node模块化教程\">#</a> CommonJS_Node 模块化教程</h1>\n<h2 id=\"nodejs模块化教程\"><a class=\"anchor\" href=\"#nodejs模块化教程\">#</a> Node.js 模块化教程</h2>\n<ol>\n<li>下载安装 node.js</li>\n<li>创建项目结构<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-modules</span><br><span class=\"line\">  |-module1.js</span><br><span class=\"line\">  |-module2.js</span><br><span class=\"line\">  |-module3.js</span><br><span class=\"line\">|-app.js</span><br><span class=\"line\">|-package.json</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;commonJS-node&quot;,</span><br><span class=\"line\">    &quot;version&quot;: &quot;1.0.0&quot;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li>下载第三方模块</li>\n</ol>\n<ul>\n<li>npm install uniq --save</li>\n</ul>\n<ol start=\"4\">\n<li>模块化编码</li>\n</ol>\n<ul>\n<li>module1.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  foo() &#123;</span><br><span class=\"line\">    console.log(&#x27;moudle1 foo()&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>module2.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;module2()&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>module3.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.foo = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;module3 foo()&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.bar = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;module3 bar()&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>app.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">  1. 定义暴露模块:</span><br><span class=\"line\">    module.exports = value;</span><br><span class=\"line\">    exports.xxx = value;</span><br><span class=\"line\">  2. 引入模块:</span><br><span class=\"line\">    var module = require(模块名或模块路径);</span><br><span class=\"line\"> */</span><br><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">//引用模块</span><br><span class=\"line\">let module1 = require(&#x27;./modules/module1&#x27;)</span><br><span class=\"line\">let module2 = require(&#x27;./modules/module2&#x27;)</span><br><span class=\"line\">let module3 = require(&#x27;./modules/module3&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">let uniq = require(&#x27;uniq&#x27;)</span><br><span class=\"line\">let fs = require(&#x27;fs&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">//使用模块</span><br><span class=\"line\">module1.foo()</span><br><span class=\"line\">module2()</span><br><span class=\"line\">module3.foo()</span><br><span class=\"line\">module3.bar()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(uniq([1, 3, 1, 4, 3]))</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(&#x27;app.js&#x27;, function (error, data) &#123;</span><br><span class=\"line\">  console.log(data.toString())</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"5\">\n<li>通过 node 运行 app.js</li>\n</ol>\n<ul>\n<li>命令: node app.js</li>\n<li>工具：右键 --&gt; 运行</li>\n</ul>\n<h1 id=\"commonjs-browserify模块化教程\"><a class=\"anchor\" href=\"#commonjs-browserify模块化教程\">#</a> CommonJS-Browserify 模块化教程</h1>\n<h2 id=\"browserify模块化使用教程\"><a class=\"anchor\" href=\"#browserify模块化使用教程\">#</a> Browserify 模块化使用教程</h2>\n<ol>\n<li>创建项目结构<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-js</span><br><span class=\"line\">  |-dist //打包生成文件的目录</span><br><span class=\"line\">  |-src //源码所在的目录</span><br><span class=\"line\">    |-module1.js</span><br><span class=\"line\">    |-module2.js</span><br><span class=\"line\">    |-module3.js</span><br><span class=\"line\">    |-app.js //应用主源文件</span><br><span class=\"line\">|-index.html</span><br><span class=\"line\">|-package.json</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;name&quot;: &quot;browserify-test&quot;,</span><br><span class=\"line\">    &quot;version&quot;: &quot;1.0.0&quot;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></li>\n<li>下载 browserify</li>\n</ol>\n<ul>\n<li>全局: npm install browserify -g</li>\n<li>局部: npm install browserify --save-dev</li>\n</ul>\n<ol start=\"3\">\n<li>定义模块代码</li>\n</ol>\n<ul>\n<li>module1.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  foo() &#123;</span><br><span class=\"line\">    console.log(&#x27;moudle1 foo()&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>module2.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;module2()&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>module3.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exports.foo = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;module3 foo()&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.bar = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;module3 bar()&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>app.js (应用的主 js)<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引用模块</span><br><span class=\"line\">let module1 = require(&#x27;./module1&#x27;)</span><br><span class=\"line\">let module2 = require(&#x27;./module2&#x27;)</span><br><span class=\"line\">let module3 = require(&#x27;./module3&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">let uniq = require(&#x27;uniq&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">//使用模块</span><br><span class=\"line\">module1.foo()</span><br><span class=\"line\">module2()</span><br><span class=\"line\">module3.foo()</span><br><span class=\"line\">module3.bar()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(uniq([1, 3, 1, 4, 3]))</span><br></pre></td></tr></table></figure></li>\n<li>打包处理 js:\n<ul>\n<li>browserify js/src/app.js -o js/dist/bundle.js</li>\n</ul>\n</li>\n<li>页面使用引入:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;js/dist/bundle.js&quot;&gt;&lt;/script&gt; </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"amd-requirejs模块化教程\"><a class=\"anchor\" href=\"#amd-requirejs模块化教程\">#</a> AMD-RequireJS 模块化教程</h1>\n<h2 id=\"requirejs使用教程\"><a class=\"anchor\" href=\"#requirejs使用教程\">#</a> require.js 使用教程</h2>\n<ol>\n<li>下载 require.js, 并引入</li>\n</ol>\n<ul>\n<li>官网: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5yZXF1aXJlanMuY24v\">http://www.requirejs.cn/</span></li>\n<li>github : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlcXVpcmVqcy9yZXF1aXJlanM=\">https://github.com/requirejs/requirejs</span></li>\n<li>将 require.js 导入项目: js/libs/require.js</li>\n</ul>\n<ol start=\"2\">\n<li>创建项目结构<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-js</span><br><span class=\"line\">  |-libs</span><br><span class=\"line\">    |-require.js</span><br><span class=\"line\">  |-modules</span><br><span class=\"line\">    |-alerter.js</span><br><span class=\"line\">    |-dataService.js</span><br><span class=\"line\">  |-main.js</span><br><span class=\"line\">|-index.html</span><br></pre></td></tr></table></figure></li>\n<li>定义 require.js 的模块代码</li>\n</ol>\n<ul>\n<li>dataService.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(function () &#123;</span><br><span class=\"line\">  let msg = &#x27;atguigu.com&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  function getMsg() &#123;</span><br><span class=\"line\">    return msg.toUpperCase()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123;getMsg&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>alerter.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&#x27;dataService&#x27;, &#x27;jquery&#x27;], function (dataService, $) &#123;</span><br><span class=\"line\">  let name = &#x27;Tom2&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  function showMsg() &#123;</span><br><span class=\"line\">    $(&#x27;body&#x27;).css(&#x27;background&#x27;, &#x27;gray&#x27;)</span><br><span class=\"line\">    alert(dataService.getMsg() + &#x27;, &#x27; + name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return &#123;showMsg&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"4\">\n<li>\n<p>应用主 (入口) js: main.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function () &#123;</span><br><span class=\"line\">  //配置</span><br><span class=\"line\">  require.config(&#123;</span><br><span class=\"line\">    //基本路径</span><br><span class=\"line\">    baseUrl: &quot;js/&quot;,</span><br><span class=\"line\">    //模块标识名与模块路径映射</span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">      &quot;alerter&quot;: &quot;modules/alerter&quot;,</span><br><span class=\"line\">      &quot;dataService&quot;: &quot;modules/dataService&quot;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  //引入使用模块</span><br><span class=\"line\">  require( [&#x27;alerter&#x27;], function(alerter) &#123;</span><br><span class=\"line\">    alerter.showMsg()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>页面使用模块:<br />\n&lt;script data-main=&quot;js/main&quot; src=&quot;js/libs/require.js&quot;&gt;&lt;/script&gt;</p>\n</li>\n</ol>\n<hr />\n<ol start=\"6\">\n<li>使用第三方基于 require.js 的框架 (jquery)</li>\n</ol>\n<ul>\n<li>将 jquery 的库文件导入到项目:\n<ul>\n<li>js/libs/jquery-1.10.1.js</li>\n</ul>\n</li>\n<li>在 main.js 中配置 jquery 路径<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">paths: &#123;</span><br><span class=\"line\">          &#x27;jquery&#x27;: &#x27;libs/jquery-1.10.1&#x27;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure></li>\n<li>在 alerter.js 中使用 jquery<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&#x27;dataService&#x27;, &#x27;jquery&#x27;], function (dataService, $) &#123;</span><br><span class=\"line\">    var name = &#x27;xfzhang&#x27;</span><br><span class=\"line\">    function showMsg() &#123;</span><br><span class=\"line\">        $(&#x27;body&#x27;).css(&#123;background : &#x27;red&#x27;&#125;)</span><br><span class=\"line\">        alert(name + &#x27; &#x27;+dataService.getMsg())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;showMsg&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<hr />\n<ol start=\"7\">\n<li>使用第三方不基于 require.js 的框架 (angular/angular-messages)</li>\n</ol>\n<ul>\n<li>将 angular.js 和 angular-messages.js 导入项目\n<ul>\n<li>js/libs/angular.js</li>\n<li>js/libs/angular-messages.js</li>\n</ul>\n</li>\n<li>在 main.js 中配置<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function () &#123;</span><br><span class=\"line\">  require.config(&#123;</span><br><span class=\"line\">    //基本路径</span><br><span class=\"line\">    baseUrl: &quot;js/&quot;,</span><br><span class=\"line\">    //模块标识名与模块路径映射</span><br><span class=\"line\">    paths: &#123;</span><br><span class=\"line\">      //第三方库</span><br><span class=\"line\">      &#x27;jquery&#x27; : &#x27;libs/jquery-1.10.1&#x27;,</span><br><span class=\"line\">      &#x27;angular&#x27; : &#x27;libs/angular&#x27;,</span><br><span class=\"line\">      &#x27;angular-messages&#x27; : &#x27;libs/angular-messages&#x27;,</span><br><span class=\"line\">      //自定义模块</span><br><span class=\"line\">      &quot;alerter&quot;: &quot;modules/alerter&quot;,</span><br><span class=\"line\">      &quot;dataService&quot;: &quot;modules/dataService&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    /*</span><br><span class=\"line\">     配置不兼容AMD的模块</span><br><span class=\"line\">     exports : 指定导出的模块名</span><br><span class=\"line\">     deps  : 指定所有依赖的模块的数组</span><br><span class=\"line\">     */</span><br><span class=\"line\">    shim: &#123;</span><br><span class=\"line\">      &#x27;angular&#x27; : &#123;</span><br><span class=\"line\">        exports : &#x27;angular&#x27;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#x27;angular-messages&#x27; : &#123;</span><br><span class=\"line\">        exports : &#x27;angular-messages&#x27;,</span><br><span class=\"line\">        deps : [&#x27;angular&#x27;]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  //引入使用模块</span><br><span class=\"line\">  require( [&#x27;alerter&#x27;, &#x27;angular&#x27;, &#x27;angular-messages&#x27;], function(alerter, angular) &#123;</span><br><span class=\"line\">    alerter.showMsg()</span><br><span class=\"line\">    angular.module(&#x27;myApp&#x27;, [&#x27;ngMessages&#x27;])</span><br><span class=\"line\">    angular.bootstrap(document,[&quot;myApp&quot;])</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></li>\n<li>页面:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form name=&quot;myForm&quot;&gt;</span><br><span class=\"line\">  用户名: &lt;input type=&quot;text&quot; name=&quot;username&quot; ng-model=&quot;username&quot; ng-required=&quot;true&quot;&gt;</span><br><span class=\"line\">  &lt;div style=&quot;color: red;&quot; ng-show=&quot;myForm.username.$dirty&amp;&amp;myForm.username.$invalid&quot;&gt;用户名是必须的&lt;/div&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"cmd-seajs模块化教程\"><a class=\"anchor\" href=\"#cmd-seajs模块化教程\">#</a> CMD-SeaJS. 模块化教程</h1>\n<h2 id=\"seajs简单使用教程\"><a class=\"anchor\" href=\"#seajs简单使用教程\">#</a> sea.js 简单使用教程</h2>\n<ol>\n<li>下载 sea.js, 并引入</li>\n</ol>\n<ul>\n<li>官网: <span class=\"exturl\" data-url=\"aHR0cDovL3NlYWpzLm9yZy8=\">http://seajs.org/</span></li>\n<li>github : <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYWpzL3NlYWpz\">https://github.com/seajs/seajs</span></li>\n<li>将 sea.js 导入项目: js/libs/sea.js</li>\n</ul>\n<ol start=\"2\">\n<li>创建项目结构<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|-js</span><br><span class=\"line\">  |-libs</span><br><span class=\"line\">    |-sea.js</span><br><span class=\"line\">  |-modules</span><br><span class=\"line\">    |-module1.js</span><br><span class=\"line\">    |-module2.js</span><br><span class=\"line\">    |-module3.js</span><br><span class=\"line\">    |-module4.js</span><br><span class=\"line\">    |-main.js</span><br><span class=\"line\">|-index.html</span><br></pre></td></tr></table></figure></li>\n<li>定义 sea.js 的模块代码</li>\n</ol>\n<ul>\n<li>module1.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(function (require, exports, module) &#123;</span><br><span class=\"line\">  //内部变量数据</span><br><span class=\"line\">  var data = &#x27;atguigu.com&#x27;</span><br><span class=\"line\">  //内部函数</span><br><span class=\"line\">  function show() &#123;</span><br><span class=\"line\">    console.log(&#x27;module1 show() &#x27; + data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  //向外暴露</span><br><span class=\"line\">  exports.show = show</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>module2.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(function (require, exports, module) &#123;</span><br><span class=\"line\">  module.exports = &#123;</span><br><span class=\"line\">    msg: &#x27;I Will Back&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>module3.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(function (require, exports, module) &#123;</span><br><span class=\"line\">  const API_KEY = &#x27;abc123&#x27;</span><br><span class=\"line\">  exports.API_KEY = API_KEY</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>module4.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(function (require, exports, module) &#123;</span><br><span class=\"line\">  //引入依赖模块(同步)</span><br><span class=\"line\">  var module2 = require(&#x27;./module2&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">  function show() &#123;</span><br><span class=\"line\">    console.log(&#x27;module4 show() &#x27; + module2.msg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  exports.show = show</span><br><span class=\"line\">  //引入依赖模块(异步)</span><br><span class=\"line\">  require.async(&#x27;./module3&#x27;, function (m3) &#123;</span><br><span class=\"line\">    console.log(&#x27;异步引入依赖模块3  &#x27; + m3.API_KEY)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n<li>main.js : 主 (入口) 模块<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(function (require) &#123;</span><br><span class=\"line\">  var m1 = require(&#x27;./module1&#x27;)</span><br><span class=\"line\">  var m4 = require(&#x27;./module4&#x27;)</span><br><span class=\"line\">  m1.show()</span><br><span class=\"line\">  m4.show()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"4\">\n<li>index.html:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\">使用seajs:</span><br><span class=\"line\">  1. 引入sea.js库</span><br><span class=\"line\">  2. 如何定义导出模块 :</span><br><span class=\"line\">    define()</span><br><span class=\"line\">    exports</span><br><span class=\"line\">    module.exports</span><br><span class=\"line\">  3. 如何依赖模块:</span><br><span class=\"line\">    require()</span><br><span class=\"line\">  4. 如何使用模块:</span><br><span class=\"line\">    seajs.use()</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;js/libs/sea.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  seajs.use(&#x27;./js/modules/main&#x27;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"es6模块化教程\"><a class=\"anchor\" href=\"#es6模块化教程\">#</a> ES6 模块化教程</h1>\n<h2 id=\"es6-babel-browserify使用教程\"><a class=\"anchor\" href=\"#es6-babel-browserify使用教程\">#</a> ES6-Babel-Browserify 使用教程</h2>\n<ol>\n<li>定义 package.json 文件<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;es6-babel-browserify&quot;,</span><br><span class=\"line\">  &quot;version&quot; : &quot;1.0.0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>安装 babel-cli, babel-preset-es2015 和 browserify</li>\n</ol>\n<ul>\n<li>npm install babel-cli browserify -g\n<ul>\n<li>npm install babel-preset-es2015 --save-dev</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>定义.babelrc 文件<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;presets&quot;: [&quot;es2015&quot;]</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></li>\n<li>编码</li>\n</ol>\n<ul>\n<li>js/src/module1.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export function foo() &#123;</span><br><span class=\"line\">  console.log(&#x27;module1 foo()&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export let bar = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;module1 bar()&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export const DATA_ARR = [1, 3, 5, 1]</span><br></pre></td></tr></table></figure></li>\n<li>js/src/module2.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let data = &#x27;module2 data&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">function fun1() &#123;</span><br><span class=\"line\">  console.log(&#x27;module2 fun1() &#x27; + data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function fun2() &#123;</span><br><span class=\"line\">  console.log(&#x27;module2 fun2() &#x27; + data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;fun1, fun2&#125;</span><br></pre></td></tr></table></figure></li>\n<li>js/src/module3.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#x27;Tom&#x27;,</span><br><span class=\"line\">  setName: function (name) &#123;</span><br><span class=\"line\">    this.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>js/src/app.js<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;foo, bar&#125; from &#x27;./module1&#x27;</span><br><span class=\"line\">import &#123;DATA_ARR&#125; from &#x27;./module1&#x27;</span><br><span class=\"line\">import &#123;fun1, fun2&#125; from &#x27;./module2&#x27;</span><br><span class=\"line\">import person from &#x27;./module3&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">import $ from &#x27;jquery&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">$(&#x27;body&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">foo()</span><br><span class=\"line\">bar()</span><br><span class=\"line\">console.log(DATA_ARR);</span><br><span class=\"line\">fun1()</span><br><span class=\"line\">fun2()</span><br><span class=\"line\"></span><br><span class=\"line\">person.setName(&#x27;JACK&#x27;)</span><br><span class=\"line\">console.log(person.name);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"5\">\n<li>编译</li>\n</ol>\n<ul>\n<li>使用 Babel 将 ES6 编译为 ES5 代码 (但包含 CommonJS 语法) : babel js/src -d js/lib</li>\n<li>使用 Browserify 编译 js : browserify js/lib/app.js -o js/lib/bundle.js</li>\n</ul>\n<ol start=\"6\">\n<li>页面中引入测试<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;js/lib/bundle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>引入第三方模块 (jQuery)<br />\n 1). 下载 jQuery 模块:\n<ul>\n<li>npm install jquery@1 --save<br />\n2). 在 app.js 中引入并使用<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import $ from &#x27;jquery&#x27;</span><br><span class=\"line\">$(&#x27;body&#x27;).css(&#x27;background&#x27;, &#x27;red&#x27;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "http://qiji5211.com/2023/11/23/qianduan/JS/JS%E9%AB%98%E7%BA%A7/",
            "url": "http://qiji5211.com/2023/11/23/qianduan/JS/JS%E9%AB%98%E7%BA%A7/",
            "title": "JavaScript高级教程",
            "date_published": "2023-11-23T09:30:58.000Z",
            "content_html": "<h1 id=\"基础总结深入\"><a class=\"anchor\" href=\"#基础总结深入\">#</a> 基础总结深入</h1>\n<h2 id=\"数据类型的分类和判断\"><a class=\"anchor\" href=\"#数据类型的分类和判断\">#</a> 数据类型的分类和判断</h2>\n<ul>\n<li>基本 (值) 类型\n<ul>\n<li>Number ----- 任意数值 -------- typeof</li>\n<li>String ----- 任意字符串 ------ typeof</li>\n<li>Boolean ---- true/false ----- typeof</li>\n<li>undefined --- undefined ----- typeof/===</li>\n<li>null -------- null ---------- ===</li>\n</ul>\n</li>\n<li>对象 (引用) 类型\n<ul>\n<li>Object ----- typeof/instanceof</li>\n<li>Array ------ instanceof</li>\n<li>Function ---- typeof</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据变量-内存的理解\"><a class=\"anchor\" href=\"#数据变量-内存的理解\">#</a> 数据，变量，内存的理解</h2>\n<ul>\n<li>什么是数据？\n<ul>\n<li>在内存中可读的，可传递的保存了特定信息的 ' 东东'</li>\n<li>一切皆数据，函数也是数据</li>\n<li>在内存中的所有操作的目标：数据</li>\n</ul>\n</li>\n<li>什么是变量？\n<ul>\n<li>在程序运行过程中它的值是允许改变的量</li>\n<li>一个变量对应一块小内存，它的值保存在此内存中</li>\n</ul>\n</li>\n<li>什么是内存？\n<ul>\n<li>内存条通电后产生的存储空间 (临时的)</li>\n<li>一块内存包含 2 个方面的数据\n<ul>\n<li>内部存储的数据</li>\n<li>地址值数据</li>\n</ul>\n</li>\n<li>内存空间的分类\n<ul>\n<li>栈空间：全局变量和局部变量</li>\n<li>堆空间：对象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>内存，数据，变量三者之间的关系\n<ul>\n<li>内存是容器，用来存储不同数据</li>\n<li>变量是内存的标识，通过变量我们可以操作 (读 / 写) 内存中的数据</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"对象的理解和使用\"><a class=\"anchor\" href=\"#对象的理解和使用\">#</a> 对象的理解和使用</h2>\n<ul>\n<li>什么是对象？\n<ul>\n<li>多个数据 (属性) 的集合</li>\n<li>用来保存多个数据 (属性) 的容器</li>\n</ul>\n</li>\n<li>属性组成:\n<ul>\n<li>属性名：字符串 (标识)</li>\n<li>属性值：任意类型</li>\n</ul>\n</li>\n<li>属性的分类:\n<ul>\n<li>一般：属性值不是 function  描述对象的状态</li>\n<li>方法：属性值为 function 的属性  描述对象的行为</li>\n</ul>\n</li>\n<li>特别的对象\n<ul>\n<li>数组：属性名是 0,1,2,3 之类的索引</li>\n<li>函数：可以执行的</li>\n</ul>\n</li>\n<li>如何操作内部属性 (方法)\n<ul>\n<li>. 属性名</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"函数的理解和使用\"><a class=\"anchor\" href=\"#函数的理解和使用\">#</a> 函数的理解和使用</h2>\n<ul>\n<li>什么是函数？\n<ul>\n<li>用来实现特定功能的，n 条语句的封装体</li>\n<li>只有函数类型的数据是可以执行的，其它的都不可以</li>\n</ul>\n</li>\n<li>为什么要用函数？\n<ul>\n<li>提高复用性</li>\n<li>便于阅读交流</li>\n</ul>\n</li>\n<li>函数也是对象\n<ul>\n<li>instanceof Object===true</li>\n<li>函数有属性: prototype</li>\n<li>函数有方法: call ()/apply ()</li>\n<li>可以添加新的属性 / 方法</li>\n</ul>\n</li>\n<li>函数的 3 种不同角色\n<ul>\n<li>一般函数：直接调用</li>\n<li>构造函数：通过 new 调用</li>\n<li>对象：通过。调用内部的属性 / 方法</li>\n</ul>\n</li>\n<li>函数中的 this\n<ul>\n<li>显式指定谁: <span class=\"exturl\" data-url=\"aHR0cDovL29iai54eHg=\">obj.xxx</span>()</li>\n<li>通过 call/apply 指定谁调用: xxx.call (obj)</li>\n<li>不指定谁调用: xxx ()  : window</li>\n<li>回调函数：看背后是通过谁来调用的: window / 其它</li>\n</ul>\n</li>\n<li>匿名函数自调用:<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function(w, obj)&#123;</span><br><span class=\"line\">  //实现代码</span><br><span class=\"line\">&#125;)(window, obj)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>专业术语为: IIFE (Immediately Invoked Function Expression) 立即调用函数表达式</li>\n</ul>\n</li>\n<li>回调函数的理解\n<ul>\n<li>什么函数才是回调函数？\n<ul>\n<li>你定义的</li>\n<li>你没有调用</li>\n<li>但它最终执行了 (在一定条件下或某个时刻)</li>\n</ul>\n</li>\n<li>常用的回调函数\n<ul>\n<li>dom 事件回调函数</li>\n<li>定时器回调函数</li>\n<li>ajax 请求回调函数 (后面讲解)</li>\n<li>生命周期回调函数 (后面讲解)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"函数高级\"><a class=\"anchor\" href=\"#函数高级\">#</a> 函数高级</h1>\n<h2 id=\"原型与原型链\"><a class=\"anchor\" href=\"#原型与原型链\">#</a> 原型与原型链</h2>\n<ul>\n<li>所有函数都有一个特别的属性:\n<ul>\n<li><code>prototype</code>  : 显式原型属性</li>\n</ul>\n</li>\n<li>所有实例对象都有一个特别的属性:\n<ul>\n<li><code>__proto__</code>  : 隐式原型属性</li>\n</ul>\n</li>\n<li>显式原型与隐式原型的关系\n<ul>\n<li>函数的 prototype: 定义函数时被自动赋值，值默认为 {}, 即用为原型对象</li>\n<li>实例对象的__proto__: 在创建实例对象时被自动添加，并赋值为构造函数的 prototype 值</li>\n<li>原型对象即为当前实例对象的父对象</li>\n</ul>\n</li>\n<li>原型链\n<ul>\n<li>所有的实例对象都有__proto__属性，它指向的就是原型对象</li>\n<li>这样通过__proto__属性就形成了一个链的结构 ----&gt; 原型链</li>\n<li>当查找对象内部的属性 / 方法时，js 引擎自动沿着这个原型链查找</li>\n<li>当给对象属性赋值时不会使用原型链，而只是在当前对象中进行操作</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"执行上下文与执行上下文栈\"><a class=\"anchor\" href=\"#执行上下文与执行上下文栈\">#</a> 执行上下文与执行上下文栈</h2>\n<ul>\n<li>变量提升与函数提升\n<ul>\n<li>变量提升：在变量定义语句之前，就可以访问到这个变量 (undefined)</li>\n<li>函数提升：在函数定义语句之前，就执行该函数</li>\n<li>先有变量提升，再有函数提升</li>\n</ul>\n</li>\n<li>理解\n<ul>\n<li>执行上下文：由 js 引擎自动创建的对象，包含对应作用域中的所有变量属性</li>\n<li>执行上下文栈：用来管理产生的多个执行上下文</li>\n</ul>\n</li>\n<li>分类:\n<ul>\n<li>全局: window</li>\n<li>函数：对程序员来说是透明的</li>\n</ul>\n</li>\n<li>生命周期\n<ul>\n<li>全局：准备执行全局代码前产生，当页面刷新 / 关闭页面时死亡</li>\n<li>函数：调用函数时产生，函数执行完时死亡</li>\n</ul>\n</li>\n<li>包含哪些属性:\n<ul>\n<li>全局 :\n<ul>\n<li>用 var 定义的全局变量  ==&gt;undefined</li>\n<li>使用 function 声明的函数   ===&gt;function</li>\n<li>this   ===&gt;window</li>\n</ul>\n</li>\n<li>函数\n<ul>\n<li>用 var 定义的局部变量  ==&gt;undefined</li>\n<li>使用 function 声明的函数   ===&gt;function</li>\n<li>this   ===&gt; 调用函数的对象，如果没有指定就是 window</li>\n<li>形参变量   ===&gt; 对应实参值</li>\n<li>arguments ===&gt; 实参列表的伪数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>执行上下文创建和初始化的过程\n<ul>\n<li>全局:\n<ul>\n<li>在全局代码执行前最先创建一个全局执行上下文 (window)</li>\n<li>收集一些全局变量，并初始化</li>\n<li>将这些变量设置为 window 的属性</li>\n</ul>\n</li>\n<li>函数:\n<ul>\n<li>在调用函数时，在执行函数体之前先创建一个函数执行上下文</li>\n<li>收集一些局部变量，并初始化</li>\n<li>将这些变量设置为执行上下文的属性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"作用域与作用域链\"><a class=\"anchor\" href=\"#作用域与作用域链\">#</a> 作用域与作用域链</h2>\n<ul>\n<li>理解:\n<ul>\n<li>作用域：一块代码区域，在编码时就确定了，不会再变化</li>\n<li>作用域链：多个嵌套的作用域形成的由内向外的结构，用于查找变量</li>\n</ul>\n</li>\n<li>分类:\n<ul>\n<li>全局</li>\n<li>函数</li>\n<li>js 没有块作用域 (在 ES6 之前)</li>\n</ul>\n</li>\n<li>作用\n<ul>\n<li>作用域：隔离变量，可以在不同作用域定义同名的变量不冲突</li>\n<li>作用域链：查找变量</li>\n</ul>\n</li>\n<li>区别作用域与执行上下文\n<ul>\n<li>作用域：静态的，编码时就确定了 (不是在运行时), 一旦确定就不会变化了</li>\n<li>执行上下文：动态的，执行代码时动态创建，当执行结束消失</li>\n<li>联系：执行上下文环境是在对应的作用域中的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<ul>\n<li>理解:\n<ul>\n<li>当嵌套的内部函数引用了外部函数的变量时就产生了闭包</li>\n<li>通过 chrome 工具得知：闭包本质是内部函数中的一个对象，这个对象中包含引用的变量属性</li>\n</ul>\n</li>\n<li>作用:\n<ul>\n<li>延长局部变量的生命周期</li>\n<li>让函数外部能操作内部的局部变量</li>\n</ul>\n</li>\n<li>写一个闭包程序<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn1() &#123;</span><br><span class=\"line\">  var a = 2;</span><br><span class=\"line\">  function fn2() &#123;</span><br><span class=\"line\">    a++;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return fn2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var f = fn1();</span><br><span class=\"line\">f();</span><br><span class=\"line\">f();</span><br></pre></td></tr></table></figure></li>\n<li>闭包应用:\n<ul>\n<li>模块化：封装一些数据以及操作数据的函数，向外暴露一些行为</li>\n<li>循环遍历加监听</li>\n<li>JS 框架 (jQuery) 大量使用了闭包</li>\n</ul>\n</li>\n<li>缺点:\n<ul>\n<li>变量占用内存的时间可能会过长</li>\n<li>可能导致内存泄露</li>\n<li>解决:\n<ul>\n<li>及时释放 : f = null; // 让内部函数对象成为垃圾对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"内存溢出与内存泄露\"><a class=\"anchor\" href=\"#内存溢出与内存泄露\">#</a> 内存溢出与内存泄露</h2>\n<ol>\n<li>内存溢出</li>\n</ol>\n<ul>\n<li>一种程序运行出现的错误</li>\n<li>当程序运行需要的内存超过了剩余的内存时，就出抛出内存溢出的错误</li>\n</ul>\n<ol start=\"2\">\n<li>内存泄露</li>\n</ol>\n<ul>\n<li>占用的内存没有及时释放</li>\n<li>内存泄露积累多了就容易导致内存溢出</li>\n<li>常见的内存泄露:\n<ul>\n<li>意外的全局变量</li>\n<li>没有及时清理的计时器或回调函数</li>\n<li>闭包</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"对象高级\"><a class=\"anchor\" href=\"#对象高级\">#</a> 对象高级</h1>\n<h2 id=\"对象的创建模式\"><a class=\"anchor\" href=\"#对象的创建模式\">#</a> 对象的创建模式</h2>\n<ul>\n<li>Object 构造函数模式<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;&#125;;</span><br><span class=\"line\">obj.name = &#x27;Tom&#x27;</span><br><span class=\"line\">obj.setName = function(name)&#123;this.name=name&#125;</span><br></pre></td></tr></table></figure></li>\n<li>对象字面量模式<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  name : &#x27;Tom&#x27;,</span><br><span class=\"line\">  setName : function(name)&#123;this.name = name&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>构造函数模式<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">  this.setName = function(name)&#123;this.name=name;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">new Person(&#x27;tom&#x27;, 12);</span><br></pre></td></tr></table></figure></li>\n<li>构造函数 + 原型的组合模式<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.setName = function(name)&#123;this.name=name;&#125;;</span><br><span class=\"line\">new Person(&#x27;tom&#x27;, 12);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"继承模式\"><a class=\"anchor\" href=\"#继承模式\">#</a> 继承模式</h2>\n<ul>\n<li>原型链继承：得到方法<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent()&#123;&#125;</span><br><span class=\"line\">Parent.prototype.test = function()&#123;&#125;;</span><br><span class=\"line\">function Child()&#123;&#125;</span><br><span class=\"line\">Child.prototype = new Parent(); // 子类型的原型指向父类型实例</span><br><span class=\"line\">Child.prototype.constructor = Child</span><br><span class=\"line\">var child = new Child(); //有test()</span><br></pre></td></tr></table></figure></li>\n<li>借用构造函数：得到属性<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent(xxx)&#123;this.xxx = xxx&#125;</span><br><span class=\"line\">Parent.prototype.test = function()&#123;&#125;;</span><br><span class=\"line\">function Child(xxx,yyy)&#123;</span><br><span class=\"line\">    Parent.call(this, xxx);//借用构造函数   this.Parent(xxx)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var child = new Child(&#x27;a&#x27;, &#x27;b&#x27;);  //child.xxx为&#x27;a&#x27;, 但child没有test()</span><br></pre></td></tr></table></figure></li>\n<li>组合<br />\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent(xxx)&#123;this.xxx = xxx&#125;</span><br><span class=\"line\">Parent.prototype.test = function()&#123;&#125;;</span><br><span class=\"line\">function Child(xxx,yyy)&#123;</span><br><span class=\"line\">    Parent.call(this, xxx);//借用构造函数   this.Parent(xxx)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Child.prototype = new Parent(); //得到test()</span><br><span class=\"line\">var child = new Child(); //child.xxx为&#x27;a&#x27;, 也有test()</span><br></pre></td></tr></table></figure></li>\n<li>new 一个对象背后做了些什么？\n<ul>\n<li>创建一个空对象</li>\n<li>给对象设置__proto__, 值为构造函数对象的 prototype 属性值   this.<strong>proto</strong> = Fn.prototype</li>\n<li>执行构造函数体 (给对象添加属性 / 方法)</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"线程机制与事件机制\"><a class=\"anchor\" href=\"#线程机制与事件机制\">#</a> 线程机制与事件机制</h1>\n<h2 id=\"线程与进程\"><a class=\"anchor\" href=\"#线程与进程\">#</a> 线程与进程</h2>\n<ul>\n<li>进程:\n<ul>\n<li>程序的一次执行，它占有一片独有的内存空间</li>\n<li>可以通过 windows 任务管理器查看进程</li>\n</ul>\n</li>\n<li>线程:\n<ul>\n<li>是进程内的一个独立执行单元</li>\n<li>是程序执行的一个完整流程</li>\n<li>是 CPU 的最小的调度单元</li>\n</ul>\n</li>\n<li>关系\n<ul>\n<li>一个进程至少有一个线程 (主)</li>\n<li>程序是在某个进程中的某个线程执行的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"浏览器内核模块组成\"><a class=\"anchor\" href=\"#浏览器内核模块组成\">#</a> 浏览器内核模块组成</h2>\n<ul>\n<li>主线程\n<ul>\n<li>js 引擎模块：负责 js 程序的编译与运行</li>\n<li>html,css 文档解析模块：负责页面文本的解析</li>\n<li>DOM/CSS 模块：负责 dom/css 在内存中的相关处理</li>\n<li>布局和渲染模块：负责页面的布局和效果的绘制 (内存中的对象)</li>\n</ul>\n</li>\n<li>分线程\n<ul>\n<li>定时器模块：负责定时器的管理</li>\n<li>DOM 事件模块：负责事件的管理</li>\n<li>网络请求模块：负责 Ajax 请求</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"js线程\"><a class=\"anchor\" href=\"#js线程\">#</a> js 线程</h2>\n<ul>\n<li>js 是单线程执行的 (回调函数也是在主线程)</li>\n<li>H5 提出了实现多线程的方案: Web Workers</li>\n<li>只能是主线程更新界面</li>\n</ul>\n<h2 id=\"定时器问题\"><a class=\"anchor\" href=\"#定时器问题\">#</a> 定时器问题:</h2>\n<ul>\n<li>定时器并不真正完全定时</li>\n<li>如果在主线程执行了一个长时间的操作，可能导致延时才处理</li>\n</ul>\n<h2 id=\"事件处理机制图\"><a class=\"anchor\" href=\"#事件处理机制图\">#</a> 事件处理机制 (图)</h2>\n<ul>\n<li>代码分类\n<ul>\n<li>初始化执行代码：包含绑定 dom 事件监听，设置定时器，发送 ajax 请求的代码</li>\n<li>回调执行代码：处理回调逻辑</li>\n</ul>\n</li>\n<li>js 引擎执行代码的基本流程:\n<ul>\n<li>初始化代码 ===&gt; 回调代码</li>\n</ul>\n</li>\n<li>模型的 2 个重要组成部分:\n<ul>\n<li>事件管理模块</li>\n<li>回调队列</li>\n</ul>\n</li>\n<li>模型的运转流程\n<ul>\n<li>执行初始化代码，将事件回调函数交给对应模块管理</li>\n<li>当事件发生时，管理模块会将回调函数及其数据添加到回调列队中</li>\n<li>只有当初始化代码执行完后 (可能要一定时间), 才会遍历读取回调队列中的回调函数执行</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"h5-web-workers\"><a class=\"anchor\" href=\"#h5-web-workers\">#</a> H5 Web Workers</h2>\n<ul>\n<li>\n<p>可以让 js 在分线程执行</p>\n</li>\n<li>\n<p>Worker<br />\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var worker = new Worker(&#x27;worker.js&#x27;);</span><br><span class=\"line\">worker.onMessage = function(event)&#123;event.data&#125; : 用来接收另一个线程发送过来的数据的回调</span><br><span class=\"line\">worker.postMessage(data1) : 向另一个线程发送数据</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>问题:</p>\n<ul>\n<li>worker 内代码不能操作 DOM 更新 UI</li>\n<li>不是每个浏览器都支持这个新特性</li>\n<li>不能跨域加载 JS</li>\n</ul>\n</li>\n<li>\n<p>svn 版本控制</p>\n</li>\n<li>\n<p>svn server</p>\n</li>\n</ul>\n",
            "tags": [
                "JS"
            ]
        }
    ]
}