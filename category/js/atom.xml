<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://qiji5211.com</id>
    <title>白骨生花 • Posts by &#34;js&#34; category</title>
    <link href="http://qiji5211.com" />
    <updated>2023-11-23T09:30:58.000Z</updated>
    <category term="高等数学相关书籍" />
    <category term="大创" />
    <category term="新生" />
    <category term="慧试" />
    <category term="TS" />
    <category term="C语言" />
    <category term="JS" />
    <category term="Vue3" />
    <category term="HTML5" />
    <category term="CSS3" />
    <entry>
        <id>http://qiji5211.com/2023/11/23/qianduan/JS/JS%E9%AB%98%E7%BA%A7/</id>
        <title>JavaScript高级教程</title>
        <link rel="alternate" href="http://qiji5211.com/2023/11/23/qianduan/JS/JS%E9%AB%98%E7%BA%A7/"/>
        <content type="html">&lt;h1 id=&#34;基础总结深入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础总结深入&#34;&gt;#&lt;/a&gt; 基础总结深入&lt;/h1&gt;
&lt;h2 id=&#34;数据类型的分类和判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据类型的分类和判断&#34;&gt;#&lt;/a&gt; 数据类型的分类和判断&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;基本 (值) 类型
&lt;ul&gt;
&lt;li&gt;Number ----- 任意数值 -------- typeof&lt;/li&gt;
&lt;li&gt;String ----- 任意字符串 ------ typeof&lt;/li&gt;
&lt;li&gt;Boolean ---- true/false ----- typeof&lt;/li&gt;
&lt;li&gt;undefined --- undefined ----- typeof/===&lt;/li&gt;
&lt;li&gt;null -------- null ---------- ===&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对象 (引用) 类型
&lt;ul&gt;
&lt;li&gt;Object ----- typeof/instanceof&lt;/li&gt;
&lt;li&gt;Array ------ instanceof&lt;/li&gt;
&lt;li&gt;Function ---- typeof&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数据变量-内存的理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据变量-内存的理解&#34;&gt;#&lt;/a&gt; 数据，变量，内存的理解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什么是数据？
&lt;ul&gt;
&lt;li&gt;在内存中可读的，可传递的保存了特定信息的 &#39; 东东&#39;&lt;/li&gt;
&lt;li&gt;一切皆数据，函数也是数据&lt;/li&gt;
&lt;li&gt;在内存中的所有操作的目标：数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;什么是变量？
&lt;ul&gt;
&lt;li&gt;在程序运行过程中它的值是允许改变的量&lt;/li&gt;
&lt;li&gt;一个变量对应一块小内存，它的值保存在此内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;什么是内存？
&lt;ul&gt;
&lt;li&gt;内存条通电后产生的存储空间 (临时的)&lt;/li&gt;
&lt;li&gt;一块内存包含 2 个方面的数据
&lt;ul&gt;
&lt;li&gt;内部存储的数据&lt;/li&gt;
&lt;li&gt;地址值数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存空间的分类
&lt;ul&gt;
&lt;li&gt;栈空间：全局变量和局部变量&lt;/li&gt;
&lt;li&gt;堆空间：对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存，数据，变量三者之间的关系
&lt;ul&gt;
&lt;li&gt;内存是容器，用来存储不同数据&lt;/li&gt;
&lt;li&gt;变量是内存的标识，通过变量我们可以操作 (读 / 写) 内存中的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象的理解和使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象的理解和使用&#34;&gt;#&lt;/a&gt; 对象的理解和使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什么是对象？
&lt;ul&gt;
&lt;li&gt;多个数据 (属性) 的集合&lt;/li&gt;
&lt;li&gt;用来保存多个数据 (属性) 的容器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;属性组成:
&lt;ul&gt;
&lt;li&gt;属性名：字符串 (标识)&lt;/li&gt;
&lt;li&gt;属性值：任意类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;属性的分类:
&lt;ul&gt;
&lt;li&gt;一般：属性值不是 function  描述对象的状态&lt;/li&gt;
&lt;li&gt;方法：属性值为 function 的属性  描述对象的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特别的对象
&lt;ul&gt;
&lt;li&gt;数组：属性名是 0,1,2,3 之类的索引&lt;/li&gt;
&lt;li&gt;函数：可以执行的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何操作内部属性 (方法)
&lt;ul&gt;
&lt;li&gt;. 属性名&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数的理解和使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数的理解和使用&#34;&gt;#&lt;/a&gt; 函数的理解和使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;什么是函数？
&lt;ul&gt;
&lt;li&gt;用来实现特定功能的，n 条语句的封装体&lt;/li&gt;
&lt;li&gt;只有函数类型的数据是可以执行的，其它的都不可以&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;为什么要用函数？
&lt;ul&gt;
&lt;li&gt;提高复用性&lt;/li&gt;
&lt;li&gt;便于阅读交流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数也是对象
&lt;ul&gt;
&lt;li&gt;instanceof Object===true&lt;/li&gt;
&lt;li&gt;函数有属性: prototype&lt;/li&gt;
&lt;li&gt;函数有方法: call ()/apply ()&lt;/li&gt;
&lt;li&gt;可以添加新的属性 / 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数的 3 种不同角色
&lt;ul&gt;
&lt;li&gt;一般函数：直接调用&lt;/li&gt;
&lt;li&gt;构造函数：通过 new 调用&lt;/li&gt;
&lt;li&gt;对象：通过。调用内部的属性 / 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数中的 this
&lt;ul&gt;
&lt;li&gt;显式指定谁: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL29iai54eHg=&#34;&gt;obj.xxx&lt;/span&gt;()&lt;/li&gt;
&lt;li&gt;通过 call/apply 指定谁调用: xxx.call (obj)&lt;/li&gt;
&lt;li&gt;不指定谁调用: xxx ()  : window&lt;/li&gt;
&lt;li&gt;回调函数：看背后是通过谁来调用的: window / 其它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;匿名函数自调用:&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;w&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; obj&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 实现代码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;window&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;专业术语为: IIFE (Immediately Invoked Function Expression) 立即调用函数表达式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;回调函数的理解
&lt;ul&gt;
&lt;li&gt;什么函数才是回调函数？
&lt;ul&gt;
&lt;li&gt;你定义的&lt;/li&gt;
&lt;li&gt;你没有调用&lt;/li&gt;
&lt;li&gt;但它最终执行了 (在一定条件下或某个时刻)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用的回调函数
&lt;ul&gt;
&lt;li&gt;dom 事件回调函数&lt;/li&gt;
&lt;li&gt;定时器回调函数&lt;/li&gt;
&lt;li&gt;ajax 请求回调函数 (后面讲解)&lt;/li&gt;
&lt;li&gt;生命周期回调函数 (后面讲解)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;函数高级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#函数高级&#34;&gt;#&lt;/a&gt; 函数高级&lt;/h1&gt;
&lt;h2 id=&#34;原型与原型链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原型与原型链&#34;&gt;#&lt;/a&gt; 原型与原型链&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有函数都有一个特别的属性:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt;  : 显式原型属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;所有实例对象都有一个特别的属性:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__proto__&lt;/code&gt;  : 隐式原型属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;显式原型与隐式原型的关系
&lt;ul&gt;
&lt;li&gt;函数的 prototype: 定义函数时被自动赋值，值默认为 {}, 即用为原型对象&lt;/li&gt;
&lt;li&gt;实例对象的__proto__: 在创建实例对象时被自动添加，并赋值为构造函数的 prototype 值&lt;/li&gt;
&lt;li&gt;原型对象即为当前实例对象的父对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;原型链
&lt;ul&gt;
&lt;li&gt;所有的实例对象都有__proto__属性，它指向的就是原型对象&lt;/li&gt;
&lt;li&gt;这样通过__proto__属性就形成了一个链的结构 ----&amp;gt; 原型链&lt;/li&gt;
&lt;li&gt;当查找对象内部的属性 / 方法时，js 引擎自动沿着这个原型链查找&lt;/li&gt;
&lt;li&gt;当给对象属性赋值时不会使用原型链，而只是在当前对象中进行操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;执行上下文与执行上下文栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行上下文与执行上下文栈&#34;&gt;#&lt;/a&gt; 执行上下文与执行上下文栈&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;变量提升与函数提升
&lt;ul&gt;
&lt;li&gt;变量提升：在变量定义语句之前，就可以访问到这个变量 (undefined)&lt;/li&gt;
&lt;li&gt;函数提升：在函数定义语句之前，就执行该函数&lt;/li&gt;
&lt;li&gt;先有变量提升，再有函数提升&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;理解
&lt;ul&gt;
&lt;li&gt;执行上下文：由 js 引擎自动创建的对象，包含对应作用域中的所有变量属性&lt;/li&gt;
&lt;li&gt;执行上下文栈：用来管理产生的多个执行上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分类:
&lt;ul&gt;
&lt;li&gt;全局: window&lt;/li&gt;
&lt;li&gt;函数：对程序员来说是透明的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生命周期
&lt;ul&gt;
&lt;li&gt;全局：准备执行全局代码前产生，当页面刷新 / 关闭页面时死亡&lt;/li&gt;
&lt;li&gt;函数：调用函数时产生，函数执行完时死亡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;包含哪些属性:
&lt;ul&gt;
&lt;li&gt;全局 :
&lt;ul&gt;
&lt;li&gt;用 var 定义的全局变量  ==&amp;gt;undefined&lt;/li&gt;
&lt;li&gt;使用 function 声明的函数   ===&amp;gt;function&lt;/li&gt;
&lt;li&gt;this   ===&amp;gt;window&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数
&lt;ul&gt;
&lt;li&gt;用 var 定义的局部变量  ==&amp;gt;undefined&lt;/li&gt;
&lt;li&gt;使用 function 声明的函数   ===&amp;gt;function&lt;/li&gt;
&lt;li&gt;this   ===&amp;gt; 调用函数的对象，如果没有指定就是 window&lt;/li&gt;
&lt;li&gt;形参变量   ===&amp;gt; 对应实参值&lt;/li&gt;
&lt;li&gt;arguments ===&amp;gt; 实参列表的伪数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;执行上下文创建和初始化的过程
&lt;ul&gt;
&lt;li&gt;全局:
&lt;ul&gt;
&lt;li&gt;在全局代码执行前最先创建一个全局执行上下文 (window)&lt;/li&gt;
&lt;li&gt;收集一些全局变量，并初始化&lt;/li&gt;
&lt;li&gt;将这些变量设置为 window 的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数:
&lt;ul&gt;
&lt;li&gt;在调用函数时，在执行函数体之前先创建一个函数执行上下文&lt;/li&gt;
&lt;li&gt;收集一些局部变量，并初始化&lt;/li&gt;
&lt;li&gt;将这些变量设置为执行上下文的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;作用域与作用域链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#作用域与作用域链&#34;&gt;#&lt;/a&gt; 作用域与作用域链&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;理解:
&lt;ul&gt;
&lt;li&gt;作用域：一块代码区域，在编码时就确定了，不会再变化&lt;/li&gt;
&lt;li&gt;作用域链：多个嵌套的作用域形成的由内向外的结构，用于查找变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分类:
&lt;ul&gt;
&lt;li&gt;全局&lt;/li&gt;
&lt;li&gt;函数&lt;/li&gt;
&lt;li&gt;js 没有块作用域 (在 ES6 之前)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用
&lt;ul&gt;
&lt;li&gt;作用域：隔离变量，可以在不同作用域定义同名的变量不冲突&lt;/li&gt;
&lt;li&gt;作用域链：查找变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;区别作用域与执行上下文
&lt;ul&gt;
&lt;li&gt;作用域：静态的，编码时就确定了 (不是在运行时), 一旦确定就不会变化了&lt;/li&gt;
&lt;li&gt;执行上下文：动态的，执行代码时动态创建，当执行结束消失&lt;/li&gt;
&lt;li&gt;联系：执行上下文环境是在对应的作用域中的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;闭包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#闭包&#34;&gt;#&lt;/a&gt; 闭包&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;理解:
&lt;ul&gt;
&lt;li&gt;当嵌套的内部函数引用了外部函数的变量时就产生了闭包&lt;/li&gt;
&lt;li&gt;通过 chrome 工具得知：闭包本质是内部函数中的一个对象，这个对象中包含引用的变量属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用:
&lt;ul&gt;
&lt;li&gt;延长局部变量的生命周期&lt;/li&gt;
&lt;li&gt;让函数外部能操作内部的局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写一个闭包程序&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fn1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fn2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      a&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; fn2&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; f &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fn1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;闭包应用:
&lt;ul&gt;
&lt;li&gt;模块化：封装一些数据以及操作数据的函数，向外暴露一些行为&lt;/li&gt;
&lt;li&gt;循环遍历加监听&lt;/li&gt;
&lt;li&gt;JS 框架 (jQuery) 大量使用了闭包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点:
&lt;ul&gt;
&lt;li&gt;变量占用内存的时间可能会过长&lt;/li&gt;
&lt;li&gt;可能导致内存泄露&lt;/li&gt;
&lt;li&gt;解决:
&lt;ul&gt;
&lt;li&gt;及时释放 : f = null; // 让内部函数对象成为垃圾对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内存溢出与内存泄露&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内存溢出与内存泄露&#34;&gt;#&lt;/a&gt; 内存溢出与内存泄露&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;内存溢出&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;一种程序运行出现的错误&lt;/li&gt;
&lt;li&gt;当程序运行需要的内存超过了剩余的内存时，就出抛出内存溢出的错误&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;内存泄露&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;占用的内存没有及时释放&lt;/li&gt;
&lt;li&gt;内存泄露积累多了就容易导致内存溢出&lt;/li&gt;
&lt;li&gt;常见的内存泄露:
&lt;ul&gt;
&lt;li&gt;意外的全局变量&lt;/li&gt;
&lt;li&gt;没有及时清理的计时器或回调函数&lt;/li&gt;
&lt;li&gt;闭包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;对象高级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象高级&#34;&gt;#&lt;/a&gt; 对象高级&lt;/h1&gt;
&lt;h2 id=&#34;对象的创建模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象的创建模式&#34;&gt;#&lt;/a&gt; 对象的创建模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Object 构造函数模式&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;setName&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象字面量模式&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function-variable function&#34;&gt;setName&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造函数模式&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; age&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;setName&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;tom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造函数 + 原型的组合模式&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; age&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;setName&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;tom&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;继承模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承模式&#34;&gt;#&lt;/a&gt; 继承模式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;原型链继承：得到方法&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 子类型的原型指向父类型实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;constructor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Child&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; child &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 有 test ()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;借用构造函数：得到属性&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;xxx&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xxx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; xxx&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;xxx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;yyy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; xxx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 借用构造函数   this.Parent (xxx)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; child &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//child.xxx 为 &#39;a&#39;, 但 child 没有 test ()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;组合&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;xxx&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xxx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; xxx&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;xxx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;yyy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; xxx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 借用构造函数   this.Parent (xxx)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 得到 test ()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; child &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//child.xxx 为 &#39;a&#39;, 也有 test ()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;new 一个对象背后做了些什么？
&lt;ul&gt;
&lt;li&gt;创建一个空对象&lt;/li&gt;
&lt;li&gt;给对象设置__proto__, 值为构造函数对象的 prototype 属性值   this.&lt;strong&gt;proto&lt;/strong&gt; = Fn.prototype&lt;/li&gt;
&lt;li&gt;执行构造函数体 (给对象添加属性 / 方法)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;线程机制与事件机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程机制与事件机制&#34;&gt;#&lt;/a&gt; 线程机制与事件机制&lt;/h1&gt;
&lt;h2 id=&#34;线程与进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程与进程&#34;&gt;#&lt;/a&gt; 线程与进程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;进程:
&lt;ul&gt;
&lt;li&gt;程序的一次执行，它占有一片独有的内存空间&lt;/li&gt;
&lt;li&gt;可以通过 windows 任务管理器查看进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程:
&lt;ul&gt;
&lt;li&gt;是进程内的一个独立执行单元&lt;/li&gt;
&lt;li&gt;是程序执行的一个完整流程&lt;/li&gt;
&lt;li&gt;是 CPU 的最小的调度单元&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关系
&lt;ul&gt;
&lt;li&gt;一个进程至少有一个线程 (主)&lt;/li&gt;
&lt;li&gt;程序是在某个进程中的某个线程执行的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;浏览器内核模块组成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器内核模块组成&#34;&gt;#&lt;/a&gt; 浏览器内核模块组成&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;主线程
&lt;ul&gt;
&lt;li&gt;js 引擎模块：负责 js 程序的编译与运行&lt;/li&gt;
&lt;li&gt;html,css 文档解析模块：负责页面文本的解析&lt;/li&gt;
&lt;li&gt;DOM/CSS 模块：负责 dom/css 在内存中的相关处理&lt;/li&gt;
&lt;li&gt;布局和渲染模块：负责页面的布局和效果的绘制 (内存中的对象)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分线程
&lt;ul&gt;
&lt;li&gt;定时器模块：负责定时器的管理&lt;/li&gt;
&lt;li&gt;DOM 事件模块：负责事件的管理&lt;/li&gt;
&lt;li&gt;网络请求模块：负责 Ajax 请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;js线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js线程&#34;&gt;#&lt;/a&gt; js 线程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;js 是单线程执行的 (回调函数也是在主线程)&lt;/li&gt;
&lt;li&gt;H5 提出了实现多线程的方案: Web Workers&lt;/li&gt;
&lt;li&gt;只能是主线程更新界面&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定时器问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时器问题&#34;&gt;#&lt;/a&gt; 定时器问题:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定时器并不真正完全定时&lt;/li&gt;
&lt;li&gt;如果在主线程执行了一个长时间的操作，可能导致延时才处理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;事件处理机制图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件处理机制图&#34;&gt;#&lt;/a&gt; 事件处理机制 (图)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;代码分类
&lt;ul&gt;
&lt;li&gt;初始化执行代码：包含绑定 dom 事件监听，设置定时器，发送 ajax 请求的代码&lt;/li&gt;
&lt;li&gt;回调执行代码：处理回调逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;js 引擎执行代码的基本流程:
&lt;ul&gt;
&lt;li&gt;初始化代码 ===&amp;gt; 回调代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模型的 2 个重要组成部分:
&lt;ul&gt;
&lt;li&gt;事件管理模块&lt;/li&gt;
&lt;li&gt;回调队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模型的运转流程
&lt;ul&gt;
&lt;li&gt;执行初始化代码，将事件回调函数交给对应模块管理&lt;/li&gt;
&lt;li&gt;当事件发生时，管理模块会将回调函数及其数据添加到回调列队中&lt;/li&gt;
&lt;li&gt;只有当初始化代码执行完后 (可能要一定时间), 才会遍历读取回调队列中的回调函数执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;h5-web-workers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#h5-web-workers&#34;&gt;#&lt;/a&gt; H5 Web Workers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以让 js 在分线程执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Worker&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; worker &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Worker&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;worker.js&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;worker&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onMessage&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; 用来接收另一个线程发送过来的数据的回调&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;worker&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;postMessage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; 向另一个线程发送数据&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;worker 内代码不能操作 DOM 更新 UI&lt;/li&gt;
&lt;li&gt;不是每个浏览器都支持这个新特性&lt;/li&gt;
&lt;li&gt;不能跨域加载 JS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;svn 版本控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;svn server&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="JS" />
        <updated>2023-11-23T09:30:58.000Z</updated>
    </entry>
    <entry>
        <id>http://qiji5211.com/2023/11/23/qianduan/JS/mo/%E6%A8%A1%E5%9D%97%E5%8C%96_%E7%AC%94%E8%AE%B0/</id>
        <title>JS模块化（简版）</title>
        <link rel="alternate" href="http://qiji5211.com/2023/11/23/qianduan/JS/mo/%E6%A8%A1%E5%9D%97%E5%8C%96_%E7%AC%94%E8%AE%B0/"/>
        <content type="html">&lt;h2 id=&#34;js模块化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#js模块化&#34;&gt;#&lt;/a&gt; JS 模块化&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;模块化的理解&lt;/li&gt;
&lt;li&gt;什么是模块？
&lt;ul&gt;
&lt;li&gt;将一个复杂的程序依据一定的规则 (规范) 封装成几个块 (文件), 并进行组合在一起&lt;/li&gt;
&lt;li&gt;块的内部数据 / 实现是私有的，只是向外部暴露一些接口 (方法) 与外部其它模块通信&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个模块的组成
&lt;ul&gt;
&lt;li&gt;数据 ---&amp;gt; 内部的属性&lt;/li&gt;
&lt;li&gt;操作数据的行为 ---&amp;gt; 内部的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化
&lt;ul&gt;
&lt;li&gt;编码时是按照模块一个一个编码的，整个项目就是一个模块化的项目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化的进化过程
&lt;ul&gt;
&lt;li&gt;全局 function 模式 :
&lt;ul&gt;
&lt;li&gt;编码：全局变量 / 函数&lt;/li&gt;
&lt;li&gt;问题：污染全局命名空间，容易引起命名冲突 / 数据不安全&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;namespace 模式 :
&lt;ul&gt;
&lt;li&gt;编码：将数据 / 行为封装到对象中&lt;/li&gt;
&lt;li&gt;解决：命名冲突 (减少了全局变量)&lt;/li&gt;
&lt;li&gt;问题：数据不安全 (外部可以直接修改模块内部的数据)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IIFE 模式 / 增强
&lt;ul&gt;
&lt;li&gt;IIFE : 立即调用函数表达式 ---&amp;gt; 匿名函数自调用&lt;/li&gt;
&lt;li&gt;编码：将数据和行为封装到一个函数内部，通过给 window 添加属性来向外暴露接口&lt;/li&gt;
&lt;li&gt;引入依赖：通过函数形参来引入依赖模块&lt;pre&gt;&lt;code&gt;(function(window, module2)&amp;#123;
  var data = &#39;atguigu.com&#39;
  function foo() &amp;#123;
     module2.xxx()
     console.log(&#39;foo()&#39;+data)
  &amp;#125;
  function bar() &amp;#123;
     console.log(&#39;bar()&#39;+data)
  &amp;#125;
  
  window.module = &amp;#123;foo&amp;#125;
&amp;#125;)(window, module2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模块化规范
&lt;ul&gt;
&lt;li&gt;CommonJS
&lt;ul&gt;
&lt;li&gt;Node.js : 服务器端&lt;/li&gt;
&lt;li&gt;Browserify : 浏览器端    也称为 js 的打包工具&lt;/li&gt;
&lt;li&gt;基本语法:
&lt;ul&gt;
&lt;li&gt;定义暴露模块 : exports&lt;pre&gt;&lt;code&gt;exports.xxx = value
module.exports = value
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
引入模块 : require&lt;pre&gt;&lt;code&gt;var module = require(&#39;模块名/模块相对路径&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;引入模块发生在什么时候？
&lt;ul&gt;
&lt;li&gt;Node : 运行时，动态同步引入&lt;/li&gt;
&lt;li&gt;Browserify : 在运行前对模块进行编译 / 转译 / 打包的处理 (已经将依赖的模块包含进来了),&lt;br /&gt;
 运行的是打包生成的 js, 运行时不存在需要再从远程引入依赖模块&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AMD : 浏览器端
&lt;ul&gt;
&lt;li&gt;require.js&lt;/li&gt;
&lt;li&gt;基本语法
&lt;ul&gt;
&lt;li&gt;定义暴露模块: define ([依赖模块名], function (){return 模块对象})&lt;/li&gt;
&lt;li&gt;引入模块: require ([&#39; 模块 1&#39;, &#39; 模块 2&#39;, &#39; 模块 3&#39;], function (m1, m2){// 使用模块对象})&lt;/li&gt;
&lt;li&gt;配置:&lt;pre&gt;&lt;code&gt;require.config(&amp;#123;
  //基本路径
  baseUrl : &#39;js/&#39;,
  //标识名称与路径的映射
  paths : &amp;#123;
    &#39;模块1&#39; : &#39;modules/模块1&#39;,
    &#39;模块2&#39; : &#39;modules/模块2&#39;,
    &#39;angular&#39; : &#39;libs/angular&#39;,
    &#39;angular-messages&#39; : &#39;libs/angular-messages&#39;
  &amp;#125;,
  //非AMD的模块
  shim : &amp;#123;
    &#39;angular&#39; : &amp;#123;
        exports : &#39;angular&#39;
    &amp;#125;,
    &#39;angular-messages&#39; : &amp;#123;
        exports : &#39;angular-messages&#39;,
        deps : [&#39;angular&#39;]
    &amp;#125;
  &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CMD : 浏览器端
&lt;ul&gt;
&lt;li&gt;sea.js&lt;/li&gt;
&lt;li&gt;基本语法
&lt;ul&gt;
&lt;li&gt;定义暴露模块:&lt;pre&gt;&lt;code&gt;define(function(require, module, exports)&amp;#123;
  通过require引入依赖模块
  通过module/exports来暴露模块
  exports.xxx = value
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;使用模块 seajs.use ([&#39; 模块 1&#39;, &#39; 模块 2&#39;])&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ES6
&lt;ul&gt;
&lt;li&gt;ES6 内置了模块化的实现&lt;/li&gt;
&lt;li&gt;基本语法
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;定义暴露模块 : export&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;暴露一个对象:&lt;pre&gt;&lt;code&gt;export default 对象
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;暴露多个:&lt;pre&gt;&lt;code&gt;export var xxx = value1
export let yyy = value2

var xxx = value1
let yyy = value2
export &amp;#123;xxx, yyy&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入使用模块 : import&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default 模块:&lt;pre&gt;&lt;code&gt;import xxx  from &#39;模块路径/模块名&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;其它模块&lt;pre&gt;&lt;code&gt;import &amp;#123;xxx, yyy&amp;#125; from &#39;模块路径/模块名&#39;
import * as module1 from &#39;模块路径/模块名&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;问题：所有浏览器还不能直接识别 ES6 模块化的语法&lt;/li&gt;
&lt;li&gt;解决:
&lt;ul&gt;
&lt;li&gt;使用 Babel 将 ES6---&amp;gt;ES5 (使用了 CommonJS) ---- 浏览器还不能直接支行&lt;/li&gt;
&lt;li&gt;使用 Browserify---&amp;gt; 打包处理 ---- 浏览器可以运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="JS" />
        <updated>2023-11-23T09:30:58.000Z</updated>
    </entry>
    <entry>
        <id>http://qiji5211.com/2023/11/23/qianduan/JS/mo/1_%E6%A8%A1%E5%9D%97%E5%8C%96%E8%BF%9B%E5%8C%96%E5%8F%B2%E6%95%99%E7%A8%8B/</id>
        <title>JS模块化</title>
        <link rel="alternate" href="http://qiji5211.com/2023/11/23/qianduan/JS/mo/1_%E6%A8%A1%E5%9D%97%E5%8C%96%E8%BF%9B%E5%8C%96%E5%8F%B2%E6%95%99%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;模块化进化史教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块化进化史教程&#34;&gt;#&lt;/a&gt; 模块化进化史教程&lt;/h1&gt;
&lt;h2 id=&#34;模块化进化史教程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块化进化史教程-2&#34;&gt;#&lt;/a&gt; 模块化进化史教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;全局 function 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module1.js&lt;pre&gt;&lt;code&gt;//数据
let data = &#39;atguigu.com&#39;

//操作数据的函数
function foo() &amp;#123;
  console.log(`foo() $&amp;#123;data&amp;#125;`)
&amp;#125;
function bar() &amp;#123;
  console.log(`bar() $&amp;#123;data&amp;#125;`)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module2.js&lt;pre&gt;&lt;code&gt;let data2 = &#39;other data&#39;

function foo() &amp;#123;  //与另一个模块中的函数冲突了
  console.log(`foo() $&amp;#123;data2&amp;#125;`)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;test1.html&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

  let data = &amp;quot;修改后的数据&amp;quot;
  foo()
  bar()
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;说明:
&lt;ul&gt;
&lt;li&gt;全局函数模式：将不同的功能封装成不同的全局函数&lt;/li&gt;
&lt;li&gt;问题: Global 被污染了，很容易引起命名冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;namespace 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module1.js&lt;pre&gt;&lt;code&gt;let myModule = &amp;#123;
  data: &#39;atguigu.com&#39;,
  foo() &amp;#123;
    console.log(`foo() $&amp;#123;this.data&amp;#125;`)
  &amp;#125;,
  bar() &amp;#123;
    console.log(`bar() $&amp;#123;this.data&amp;#125;`)
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module2.js&lt;pre&gt;&lt;code&gt;let myModule2 = &amp;#123;
  data: &#39;atguigu.com2222&#39;,
  foo() &amp;#123;
    console.log(`foo() $&amp;#123;this.data&amp;#125;`)
  &amp;#125;,
  bar() &amp;#123;
    console.log(`bar() $&amp;#123;this.data&amp;#125;`)
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;test2.html&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module22.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  myModule.foo()
  myModule.bar()

  myModule2.foo()
  myModule2.bar()

  myModule.data = &#39;other data&#39; //能直接修改模块内部的数据
  myModule.foo()

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;说明
&lt;ul&gt;
&lt;li&gt;namespace 模式：简单对象封装&lt;/li&gt;
&lt;li&gt;作用：减少了全局变量&lt;/li&gt;
&lt;li&gt;问题：不安全&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;IIFE 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module3.js&lt;pre&gt;&lt;code&gt;(function (window) &amp;#123;
  //数据
  let data = &#39;atguigu.com&#39;

  //操作数据的函数
  function foo() &amp;#123; //用于暴露有函数
    console.log(`foo() $&amp;#123;data&amp;#125;`)
  &amp;#125;

  function bar() &amp;#123;//用于暴露有函数
    console.log(`bar() $&amp;#123;data&amp;#125;`)
    otherFun() //内部调用
  &amp;#125;

  function otherFun() &amp;#123; //内部私有的函数
    console.log(&#39;otherFun()&#39;)
  &amp;#125;

  //暴露行为
  window.myModule = &amp;#123;foo, bar&amp;#125;
&amp;#125;)(window)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;test3.html&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  myModule.foo()
  myModule.bar()
  //myModule.otherFun()  //myModule.otherFun is not a function
  console.log(myModule.data) //undefined 不能访问模块内部数据
  myModule.data = &#39;xxxx&#39; //不是修改的模块内部的data
  myModule.foo() //没有改变

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;说明:
&lt;ul&gt;
&lt;li&gt;IIFE 模式：匿名函数自调用 (闭包)&lt;/li&gt;
&lt;li&gt;IIFE : immediately-invoked function expression (立即调用函数表达式)&lt;/li&gt;
&lt;li&gt;作用：数据是私有的，外部只能通过暴露的方法操作&lt;/li&gt;
&lt;li&gt;问题：如果当前这个模块依赖另一个模块怎么办？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;IIFE 模式增强&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;引入 jquery 到项目中&lt;/li&gt;
&lt;li&gt;module4.js&lt;pre&gt;&lt;code&gt;(function (window, $) &amp;#123;
  //数据
  let data = &#39;atguigu.com&#39;

  //操作数据的函数
  function foo() &amp;#123; //用于暴露有函数
    console.log(`foo() $&amp;#123;data&amp;#125;`)
    $(&#39;body&#39;).css(&#39;background&#39;, &#39;red&#39;)
  &amp;#125;

  function bar() &amp;#123;//用于暴露有函数
    console.log(`bar() $&amp;#123;data&amp;#125;`)
    otherFun() //内部调用
  &amp;#125;

  function otherFun() &amp;#123; //内部私有的函数
    console.log(&#39;otherFun()&#39;)
  &amp;#125;

  //暴露行为
  window.myModule = &amp;#123;foo, bar&amp;#125;
&amp;#125;)(window, jQuery)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;test4.html&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-1.10.1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module4.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  myModule.foo()
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;说明
&lt;ul&gt;
&lt;li&gt;IIFE 模式增强：引入依赖&lt;/li&gt;
&lt;li&gt;这就是现代模块实现的基石&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;页面加载多个 js 的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;页面:&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module1.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module2.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;module4.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;说明
&lt;ul&gt;
&lt;li&gt;一个页面需要引入多个 js 文件&lt;/li&gt;
&lt;li&gt;问题:
&lt;ul&gt;
&lt;li&gt;请求过多&lt;/li&gt;
&lt;li&gt;依赖模糊&lt;/li&gt;
&lt;li&gt;难以维护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这些问题可以通过现代模块化编码和项目构建来解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;commonjs_node模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#commonjs_node模块化教程&#34;&gt;#&lt;/a&gt; CommonJS_Node 模块化教程&lt;/h1&gt;
&lt;h2 id=&#34;nodejs模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nodejs模块化教程&#34;&gt;#&lt;/a&gt; Node.js 模块化教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载安装 node.js&lt;/li&gt;
&lt;li&gt;创建项目结构&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;|-modules
  |-module1.js
  |-module2.js
  |-module3.js
|-app.js
|-package.json
  &amp;#123;
    &amp;quot;name&amp;quot;: &amp;quot;commonJS-node&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;下载第三方模块&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;npm install uniq --save&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;模块化编码&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module1.js&lt;pre&gt;&lt;code&gt;module.exports = &amp;#123;
  foo() &amp;#123;
    console.log(&#39;moudle1 foo()&#39;)
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module2.js&lt;pre&gt;&lt;code&gt;module.exports = function () &amp;#123;
  console.log(&#39;module2()&#39;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module3.js&lt;pre&gt;&lt;code&gt;exports.foo = function () &amp;#123;
  console.log(&#39;module3 foo()&#39;)
&amp;#125;

exports.bar = function () &amp;#123;
  console.log(&#39;module3 bar()&#39;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;app.js&lt;pre&gt;&lt;code&gt;/**
  1. 定义暴露模块:
    module.exports = value;
    exports.xxx = value;
  2. 引入模块:
    var module = require(模块名或模块路径);
 */
&amp;quot;use strict&amp;quot;;
//引用模块
let module1 = require(&#39;./modules/module1&#39;)
let module2 = require(&#39;./modules/module2&#39;)
let module3 = require(&#39;./modules/module3&#39;)

let uniq = require(&#39;uniq&#39;)
let fs = require(&#39;fs&#39;)

//使用模块
module1.foo()
module2()
module3.foo()
module3.bar()

console.log(uniq([1, 3, 1, 4, 3]))

fs.readFile(&#39;app.js&#39;, function (error, data) &amp;#123;
  console.log(data.toString())
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;通过 node 运行 app.js&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;命令: node app.js&lt;/li&gt;
&lt;li&gt;工具：右键 --&amp;gt; 运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;commonjs-browserify模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#commonjs-browserify模块化教程&#34;&gt;#&lt;/a&gt; CommonJS-Browserify 模块化教程&lt;/h1&gt;
&lt;h2 id=&#34;browserify模块化使用教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#browserify模块化使用教程&#34;&gt;#&lt;/a&gt; Browserify 模块化使用教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建项目结构&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;|-js
  |-dist //打包生成文件的目录
  |-src //源码所在的目录
    |-module1.js
    |-module2.js
    |-module3.js
    |-app.js //应用主源文件
|-index.html
|-package.json
  &amp;#123;
    &amp;quot;name&amp;quot;: &amp;quot;browserify-test&amp;quot;,
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;下载 browserify&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;全局: npm install browserify -g&lt;/li&gt;
&lt;li&gt;局部: npm install browserify --save-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;定义模块代码&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module1.js&lt;pre&gt;&lt;code&gt;module.exports = &amp;#123;
  foo() &amp;#123;
    console.log(&#39;moudle1 foo()&#39;)
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module2.js&lt;pre&gt;&lt;code&gt;module.exports = function () &amp;#123;
  console.log(&#39;module2()&#39;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module3.js&lt;pre&gt;&lt;code&gt;exports.foo = function () &amp;#123;
  console.log(&#39;module3 foo()&#39;)
&amp;#125;

exports.bar = function () &amp;#123;
  console.log(&#39;module3 bar()&#39;)
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;app.js (应用的主 js)&lt;pre&gt;&lt;code&gt;//引用模块
let module1 = require(&#39;./module1&#39;)
let module2 = require(&#39;./module2&#39;)
let module3 = require(&#39;./module3&#39;)

let uniq = require(&#39;uniq&#39;)

//使用模块
module1.foo()
module2()
module3.foo()
module3.bar()

console.log(uniq([1, 3, 1, 4, 3]))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;打包处理 js:
&lt;ul&gt;
&lt;li&gt;browserify js/src/app.js -o js/dist/bundle.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;页面使用引入:&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/dist/bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;amd-requirejs模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#amd-requirejs模块化教程&#34;&gt;#&lt;/a&gt; AMD-RequireJS 模块化教程&lt;/h1&gt;
&lt;h2 id=&#34;requirejs使用教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#requirejs使用教程&#34;&gt;#&lt;/a&gt; require.js 使用教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载 require.js, 并引入&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;官网: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5yZXF1aXJlanMuY24v&#34;&gt;http://www.requirejs.cn/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;github : &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3JlcXVpcmVqcy9yZXF1aXJlanM=&#34;&gt;https://github.com/requirejs/requirejs&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;将 require.js 导入项目: js/libs/require.js&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;创建项目结构&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;|-js
  |-libs
    |-require.js
  |-modules
    |-alerter.js
    |-dataService.js
  |-main.js
|-index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;定义 require.js 的模块代码&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;dataService.js&lt;pre&gt;&lt;code&gt;define(function () &amp;#123;
  let msg = &#39;atguigu.com&#39;

  function getMsg() &amp;#123;
    return msg.toUpperCase()
  &amp;#125;

  return &amp;#123;getMsg&amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;alerter.js&lt;pre&gt;&lt;code&gt;define([&#39;dataService&#39;, &#39;jquery&#39;], function (dataService, $) &amp;#123;
  let name = &#39;Tom2&#39;

  function showMsg() &amp;#123;
    $(&#39;body&#39;).css(&#39;background&#39;, &#39;gray&#39;)
    alert(dataService.getMsg() + &#39;, &#39; + name)
  &amp;#125;

  return &amp;#123;showMsg&amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;应用主 (入口) js: main.js&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;(function () &amp;#123;
  //配置
  require.config(&amp;#123;
    //基本路径
    baseUrl: &amp;quot;js/&amp;quot;,
    //模块标识名与模块路径映射
    paths: &amp;#123;
      &amp;quot;alerter&amp;quot;: &amp;quot;modules/alerter&amp;quot;,
      &amp;quot;dataService&amp;quot;: &amp;quot;modules/dataService&amp;quot;,
    &amp;#125;
  &amp;#125;)
  //引入使用模块
  require( [&#39;alerter&#39;], function(alerter) &amp;#123;
    alerter.showMsg()
  &amp;#125;)
&amp;#125;)()
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;页面使用模块:&lt;br /&gt;
&amp;lt;script data-main=&amp;quot;js/main&amp;quot; src=&amp;quot;js/libs/require.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;使用第三方基于 require.js 的框架 (jquery)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将 jquery 的库文件导入到项目:
&lt;ul&gt;
&lt;li&gt;js/libs/jquery-1.10.1.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 main.js 中配置 jquery 路径&lt;pre&gt;&lt;code&gt;paths: &amp;#123;
          &#39;jquery&#39;: &#39;libs/jquery-1.10.1&#39;
      &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;在 alerter.js 中使用 jquery&lt;pre&gt;&lt;code&gt;define([&#39;dataService&#39;, &#39;jquery&#39;], function (dataService, $) &amp;#123;
    var name = &#39;xfzhang&#39;
    function showMsg() &amp;#123;
        $(&#39;body&#39;).css(&amp;#123;background : &#39;red&#39;&amp;#125;)
        alert(name + &#39; &#39;+dataService.getMsg())
    &amp;#125;
    return &amp;#123;showMsg&amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;使用第三方不基于 require.js 的框架 (angular/angular-messages)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将 angular.js 和 angular-messages.js 导入项目
&lt;ul&gt;
&lt;li&gt;js/libs/angular.js&lt;/li&gt;
&lt;li&gt;js/libs/angular-messages.js&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在 main.js 中配置&lt;pre&gt;&lt;code&gt;(function () &amp;#123;
  require.config(&amp;#123;
    //基本路径
    baseUrl: &amp;quot;js/&amp;quot;,
    //模块标识名与模块路径映射
    paths: &amp;#123;
      //第三方库
      &#39;jquery&#39; : &#39;libs/jquery-1.10.1&#39;,
      &#39;angular&#39; : &#39;libs/angular&#39;,
      &#39;angular-messages&#39; : &#39;libs/angular-messages&#39;,
      //自定义模块
      &amp;quot;alerter&amp;quot;: &amp;quot;modules/alerter&amp;quot;,
      &amp;quot;dataService&amp;quot;: &amp;quot;modules/dataService&amp;quot;
    &amp;#125;,
    /*
     配置不兼容AMD的模块
     exports : 指定导出的模块名
     deps  : 指定所有依赖的模块的数组
     */
    shim: &amp;#123;
      &#39;angular&#39; : &amp;#123;
        exports : &#39;angular&#39;
      &amp;#125;,
      &#39;angular-messages&#39; : &amp;#123;
        exports : &#39;angular-messages&#39;,
        deps : [&#39;angular&#39;]
      &amp;#125;
    &amp;#125;
  &amp;#125;)
  //引入使用模块
  require( [&#39;alerter&#39;, &#39;angular&#39;, &#39;angular-messages&#39;], function(alerter, angular) &amp;#123;
    alerter.showMsg()
    angular.module(&#39;myApp&#39;, [&#39;ngMessages&#39;])
    angular.bootstrap(document,[&amp;quot;myApp&amp;quot;])
  &amp;#125;)
&amp;#125;)()
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;页面:&lt;pre&gt;&lt;code&gt;&amp;lt;form name=&amp;quot;myForm&amp;quot;&amp;gt;
  用户名: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot; ng-model=&amp;quot;username&amp;quot; ng-required=&amp;quot;true&amp;quot;&amp;gt;
  &amp;lt;div style=&amp;quot;color: red;&amp;quot; ng-show=&amp;quot;myForm.username.$dirty&amp;amp;&amp;amp;myForm.username.$invalid&amp;quot;&amp;gt;用户名是必须的&amp;lt;/div&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cmd-seajs模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cmd-seajs模块化教程&#34;&gt;#&lt;/a&gt; CMD-SeaJS. 模块化教程&lt;/h1&gt;
&lt;h2 id=&#34;seajs简单使用教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#seajs简单使用教程&#34;&gt;#&lt;/a&gt; sea.js 简单使用教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载 sea.js, 并引入&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;官网: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NlYWpzLm9yZy8=&#34;&gt;http://seajs.org/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;github : &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NlYWpzL3NlYWpz&#34;&gt;https://github.com/seajs/seajs&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;将 sea.js 导入项目: js/libs/sea.js&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;创建项目结构&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;|-js
  |-libs
    |-sea.js
  |-modules
    |-module1.js
    |-module2.js
    |-module3.js
    |-module4.js
    |-main.js
|-index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;定义 sea.js 的模块代码&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;module1.js&lt;pre&gt;&lt;code&gt;define(function (require, exports, module) &amp;#123;
  //内部变量数据
  var data = &#39;atguigu.com&#39;
  //内部函数
  function show() &amp;#123;
    console.log(&#39;module1 show() &#39; + data)
  &amp;#125;

  //向外暴露
  exports.show = show
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module2.js&lt;pre&gt;&lt;code&gt;define(function (require, exports, module) &amp;#123;
  module.exports = &amp;#123;
    msg: &#39;I Will Back&#39;
  &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module3.js&lt;pre&gt;&lt;code&gt;define(function (require, exports, module) &amp;#123;
  const API_KEY = &#39;abc123&#39;
  exports.API_KEY = API_KEY
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;module4.js&lt;pre&gt;&lt;code&gt;define(function (require, exports, module) &amp;#123;
  //引入依赖模块(同步)
  var module2 = require(&#39;./module2&#39;)

  function show() &amp;#123;
    console.log(&#39;module4 show() &#39; + module2.msg)
  &amp;#125;

  exports.show = show
  //引入依赖模块(异步)
  require.async(&#39;./module3&#39;, function (m3) &amp;#123;
    console.log(&#39;异步引入依赖模块3  &#39; + m3.API_KEY)
  &amp;#125;)
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;main.js : 主 (入口) 模块&lt;pre&gt;&lt;code&gt;define(function (require) &amp;#123;
  var m1 = require(&#39;./module1&#39;)
  var m4 = require(&#39;./module4&#39;)
  m1.show()
  m4.show()
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;index.html:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!--
使用seajs:
  1. 引入sea.js库
  2. 如何定义导出模块 :
    define()
    exports
    module.exports
  3. 如何依赖模块:
    require()
  4. 如何使用模块:
    seajs.use()
--&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/libs/sea.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  seajs.use(&#39;./js/modules/main&#39;)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;es6模块化教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es6模块化教程&#34;&gt;#&lt;/a&gt; ES6 模块化教程&lt;/h1&gt;
&lt;h2 id=&#34;es6-babel-browserify使用教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#es6-babel-browserify使用教程&#34;&gt;#&lt;/a&gt; ES6-Babel-Browserify 使用教程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;定义 package.json 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;
  &amp;quot;name&amp;quot; : &amp;quot;es6-babel-browserify&amp;quot;,
  &amp;quot;version&amp;quot; : &amp;quot;1.0.0&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;安装 babel-cli, babel-preset-es2015 和 browserify&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;npm install babel-cli browserify -g
&lt;ul&gt;
&lt;li&gt;npm install babel-preset-es2015 --save-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;定义.babelrc 文件&lt;pre&gt;&lt;code&gt;&amp;#123;
&amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;}&lt;br /&gt;
```&lt;br /&gt;
4. 编码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;js/src/module1.js&lt;pre&gt;&lt;code&gt;export function foo() &amp;#123;
  console.log(&#39;module1 foo()&#39;);
&amp;#125;
export let bar = function () &amp;#123;
  console.log(&#39;module1 bar()&#39;);
&amp;#125;
export const DATA_ARR = [1, 3, 5, 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;js/src/module2.js&lt;pre&gt;&lt;code&gt;let data = &#39;module2 data&#39;

function fun1() &amp;#123;
  console.log(&#39;module2 fun1() &#39; + data);
&amp;#125;

function fun2() &amp;#123;
  console.log(&#39;module2 fun2() &#39; + data);
&amp;#125;

export &amp;#123;fun1, fun2&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;js/src/module3.js&lt;pre&gt;&lt;code&gt;export default &amp;#123;
  name: &#39;Tom&#39;,
  setName: function (name) &amp;#123;
    this.name = name
  &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;js/src/app.js&lt;pre&gt;&lt;code&gt;import &amp;#123;foo, bar&amp;#125; from &#39;./module1&#39;
import &amp;#123;DATA_ARR&amp;#125; from &#39;./module1&#39;
import &amp;#123;fun1, fun2&amp;#125; from &#39;./module2&#39;
import person from &#39;./module3&#39;

import $ from &#39;jquery&#39;

$(&#39;body&#39;).css(&#39;background&#39;, &#39;red&#39;)

foo()
bar()
console.log(DATA_ARR);
fun1()
fun2()

person.setName(&#39;JACK&#39;)
console.log(person.name);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;编译&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;使用 Babel 将 ES6 编译为 ES5 代码 (但包含 CommonJS 语法) : babel js/src -d js/lib&lt;/li&gt;
&lt;li&gt;使用 Browserify 编译 js : browserify js/lib/app.js -o js/lib/bundle.js&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;页面中引入测试&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;js/lib/bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;引入第三方模块 (jQuery)&lt;br /&gt;
 1). 下载 jQuery 模块:
&lt;ul&gt;
&lt;li&gt;npm install jquery@1 --save&lt;br /&gt;
2). 在 app.js 中引入并使用&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;import $ from &#39;jquery&#39;
$(&#39;body&#39;).css(&#39;background&#39;, &#39;red&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="JS" />
        <updated>2023-11-23T09:30:58.000Z</updated>
    </entry>
</feed>
